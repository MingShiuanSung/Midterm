// Generated by stratus_hls 19.12-s100  (91710.131054)
// Sun Apr 17 22:20:59 2022
// from dut.cc

`timescale 1ps / 1ps

      
module dut(clk, rst, din_busy, din_vld, din_data_a, din_data_b, din_data_c, din_data_d, din_data_e, din_data_f, din_data_g, din_data_h, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input din_vld;
      input [7:0] din_data_a;
      input [7:0] din_data_b;
      input [7:0] din_data_c;
      input [7:0] din_data_d;
      input [7:0] din_data_e;
      input [7:0] din_data_f;
      input [7:0] din_data_g;
      input [7:0] din_data_h;
      input dout_busy;
      output din_busy;
      output dout_vld;
      output [255:0] dout_data;
      reg [255:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      wire dut_Xor_1Ux1U_1U_1_4_out1;
      wire dut_Or_1Ux1U_1U_4_5_out1;
      reg dut_N_Muxb_1_2_3_4_1_out1;
      reg din_m_unvalidated_req;
      wire dut_gen_busy_r_1_2_gnew_req;
      wire dut_gen_busy_r_1_2_gdiv;
      wire dut_gen_busy_r_1_2_gen_busy_din_m_data_is_invalid_next;
      reg[2:0] global_state_next;
      reg[31:0] dut_N_Mux_32_2_2_4_41_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_40_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_39_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_38_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_37_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_36_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_35_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_34_out1;
      reg[31:0] dut_N_Mux_32_8_0_4_33_out1;
      wire dut_OrReduction_3U_1U_4_32_out1;
      wire dut_Equal_3Ux1U_1U_4_31_out1;
      wire dut_Equal_3Ux2U_1U_4_30_out1;
      wire dut_Equal_3Ux2U_1U_4_29_out1;
      wire dut_Equal_3Ux3U_1U_4_28_out1;
      wire dut_Equal_3Ux3U_1U_4_27_out1;
      wire dut_Equal_3Ux3U_1U_4_26_out1;
      wire dut_Equal_3Ux3U_1U_4_25_out1;
      reg[31:0] dut_N_Mux_32_8_0_4_24_out1;
      wire dut_OrReduction_3U_1U_4_23_out1;
      wire dut_Equal_3Ux1U_1U_4_22_out1;
      wire dut_Equal_3Ux2U_1U_4_21_out1;
      wire dut_Equal_3Ux2U_1U_4_20_out1;
      wire dut_Equal_3Ux3U_1U_4_19_out1;
      wire dut_Equal_3Ux3U_1U_4_18_out1;
      wire dut_Equal_3Ux3U_1U_4_17_out1;
      wire dut_Equal_3Ux3U_1U_4_16_out1;
      /*signed*/reg[2:0] dut_N_Mux_3_2_1_4_13_in2;
      /*signed*/reg[2:0] dut_N_Mux_3_2_1_4_13_in3;
      wire dut_LessThan_32Ux32U_1U_4_12_out1;
      reg[31:0] dut_N_Mux_32_8_0_4_11_out1;
      reg[2:0] dut_N_Mux_32_8_0_4_11_ctrl1;
      reg gs_ctrl18;
      reg[31:0] dut_N_Mux_32_8_0_4_10_out1;
      reg[2:0] dut_N_Mux_32_8_0_4_10_ctrl1;
      reg[1:0] gs_ctrl9;
      reg[31:0] dut_N_Mux_32_8_0_4_10_in2;
      reg[31:0] dut_N_Mux_32_8_0_4_10_in3;
      reg[31:0] dut_N_Mux_32_8_0_4_10_in4;
      reg[31:0] dut_N_Mux_32_8_0_4_10_in5;
      reg[31:0] dut_N_Mux_32_8_0_4_10_in6;
      reg[31:0] dut_N_Mux_32_8_0_4_10_in7;
      reg[31:0] dut_N_Mux_32_8_0_4_10_in8;
      reg[31:0] dut_N_Mux_32_8_0_4_10_in9;
      reg gs_ctrl1;
      reg[2:0] dut_Add_3Ux2S_5S_4_8_in2;
      reg gs_ctrl0;
      /*signed*/wire[31:0] dut_Add_32Sx2S_32S_4_14_out1;
      /*signed*/wire[4:0] dut_Add_3Ux2S_5S_4_8_out1;
      reg[31:0] s_reg_47;
      reg[2:0] dut_N_Mux_3_2_1_4_13_out1;
      reg[2:0] s_reg_46;
      wire dut_LessThan_5Sx5S_1U_4_9_out1;
      /*signed*/wire[4:0] dut_Add_3Ux2S_5S_4_50_out1;
      /*signed*/reg[2:0] s_reg_44_slice;
      reg[31:0] s_reg_43;
      reg[31:0] s_reg_42;
      reg[31:0] s_reg_41;
      reg[31:0] s_reg_40;
      reg[31:0] s_reg_39;
      reg[31:0] s_reg_38;
      reg[31:0] s_reg_37;
      wire dut_LessThan_33Sx33S_1U_4_15_out1;
      reg[31:0] s_reg_36;
      wire[2:0] dut_gen_busy_r_1_2_out1;
      wire dut_And_1Ux1U_1U_1_6_out1;
      wire dut_Not_1U_1U_1_7_out1;
      wire dut_LessThan_5Sx4S_1U_4_51_out1;
      reg dout_m_req_m_trig_req;
      reg din_m_busy_req_0;
      reg[31:0] dut_N_Mux_32_2_2_4_42_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_43_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_44_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_45_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_46_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_47_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_48_out1;
      reg[31:0] dut_N_Mux_32_2_2_4_49_out1;
      reg[2:0] global_state;
      reg stall0;

         // rtl_process:dut/drive_dout_data
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_dout_data
         // at: cynw_p2p.h:5278:13
         // at: dut.cc:82:3
         always @(posedge clk)
          begin :drive_dout_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd2, 3'd3:                      begin
                        // op:thread1/OP150
                        // at: dut.cc:82:3
                        // Call Stack: 
                        // in function thread1 called from dut.cc:82:3
                        dout_data <= {dut_N_Mux_32_2_2_4_42_out1, {dut_N_Mux_32_2_2_4_43_out1, {dut_N_Mux_32_2_2_4_44_out1, {dut_N_Mux_32_2_2_4_45_out1, {dut_N_Mux_32_2_2_4_46_out1, {dut_N_Mux_32_2_2_4_47_out1, {dut_N_Mux_32_2_2_4_48_out1, dut_N_Mux_32_2_2_4_49_out1}}}}}}};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_din_m_busy_req_0
         // Sharing or Control mux
         // Sharing/Controlling 5 operation(s) on drive_din_m_busy_req_0
         // at: cynw_p2p.h:1806:17
         // at: cynw_p2p.h:1761:12
         // at: cynw_p2p.h:1515:2
         // at: cynw_p2p.h:1595:7
         // at: cynw_p2p.h:1620:7
         always @(posedge clk)
          begin :drive_din_m_busy_req_0
            if (rst == 1'b0) begin
               // op:thread1/OP63
               // at: cynw_p2p.h:1515:2
               // Call Stack: 
               // in function reset called from dut.cc:33:7
               din_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        3'd0, 3'd7:                         begin
                           // op:thread1/OP66
                           // at: cynw_p2p.h:1595:7
                           // Call Stack: 
                           // in function get_start called from cynw_p2p.h:1455:7
                           // in function get called from dut.cc:41:23
                           din_m_busy_req_0 <= 1'd0;
                        end
                        
                        3'd1:                         begin
                           // op:thread1/OP69
                           // at: cynw_p2p.h:1620:7
                           // Call Stack: 
                           // in function get_end called from cynw_p2p.h:1478:7
                           // in function get called from dut.cc:41:23
                           din_m_busy_req_0 <= 1'd1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_dout_m_req_m_trig_req
         // Sharing or Control mux
         // Sharing/Controlling 5 operation(s) on drive_dout_m_req_m_trig_req
         // at: cynw_comm_util.h:1345:27
         // at: cynw_comm_util.h:1331:52
         // at: cynw_comm_util.h:1367:26
         // at: cynw_comm_util.h:1293:7
         // at: cynw_comm_util.h:1286:2
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               // op:thread1/OP65
               // at: cynw_comm_util.h:1293:7
               // Call Stack: 
               // in function reset called from cynw_p2p.h:5087:13
               // in function reset called from dut.cc:34:8
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        3'd5:                         begin
                           if (dut_LessThan_5Sx4S_1U_4_51_out1) begin
                           end
                           else begin
                              // op:thread1/OP153
                              // at: cynw_comm_util.h:1286:2
                              // Call Stack: 
                              // in function trig called from cynw_p2p.h:5279:8
                              // in function nb_put_work called from cynw_p2p.h:5063:7
                              // in function put called from dut.cc:84:8
                              dout_m_req_m_trig_req <= dut_Not_1U_1U_1_7_out1;
                           end
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_stall0
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_stall0
         // at: cynw_p2p.h:1532:33
         // at: cynw_p2p.h:1849:47
         // at: cynw_p2p.h:1464:9
         // at: cynw_p2p.h:5071:2
         always @(dut_gen_busy_r_1_2_out1[0] or dut_And_1Ux1U_1U_1_6_out1 or global_state)
          begin :drive_stall0
            case (global_state) 

               3'd1:                begin
                  // op:thread1/OP68
                  // at: cynw_p2p.h:1464:9
                  // Call Stack: 
                  // in function get called from dut.cc:41:23
                  stall0 = dut_gen_busy_r_1_2_out1[0];
               end
               
               3'd7:                begin
                  // op:thread1/OP155
                  // at: cynw_p2p.h:5071:2
                  // Call Stack: 
                  // in function put called from dut.cc:84:8
                  stall0 = dut_And_1Ux1U_1U_1_6_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_36
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_36
         // at: dut.cc:71:7
         always @(posedge clk)
          begin :drive_s_reg_36
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        /* state5 */
                        // op:thread1/OP87
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_36 <= {24'b000000000000000000000000, din_data_a};
                     end
                     
                     3'd2:                      begin
                        // op:thread1/OP146
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_36 <= dut_N_Mux_32_2_2_4_49_out1;
                     end
                     
                     3'd3:                      begin
                        if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                        end
                        else begin
                           // op:thread1/OP146
                           // at: dut.cc:71:7
                           // Call Stack: 
                           // in function thread1 called from dut.cc:71:7
                           s_reg_36 <= dut_N_Mux_32_2_2_4_49_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_37
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_37
         // at: dut.cc:71:7
         always @(posedge clk)
          begin :drive_s_reg_37
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        // op:thread1/OP88
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_37 <= {24'b000000000000000000000000, din_data_b};
                     end
                     
                     3'd2:                      begin
                        // op:thread1/OP142
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_37 <= dut_N_Mux_32_2_2_4_48_out1;
                     end
                     
                     3'd3:                      begin
                        if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                        end
                        else begin
                           // op:thread1/OP142
                           // at: dut.cc:71:7
                           // Call Stack: 
                           // in function thread1 called from dut.cc:71:7
                           s_reg_37 <= dut_N_Mux_32_2_2_4_48_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_38
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_38
         // at: dut.cc:71:7
         always @(posedge clk)
          begin :drive_s_reg_38
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        // op:thread1/OP89
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_38 <= {24'b000000000000000000000000, din_data_c};
                     end
                     
                     3'd2:                      begin
                        // op:thread1/OP138
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_38 <= dut_N_Mux_32_2_2_4_47_out1;
                     end
                     
                     3'd3:                      begin
                        if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                        end
                        else begin
                           // op:thread1/OP138
                           // at: dut.cc:71:7
                           // Call Stack: 
                           // in function thread1 called from dut.cc:71:7
                           s_reg_38 <= dut_N_Mux_32_2_2_4_47_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_39
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_39
         // at: dut.cc:71:7
         always @(posedge clk)
          begin :drive_s_reg_39
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        // op:thread1/OP90
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_39 <= {24'b000000000000000000000000, din_data_d};
                     end
                     
                     3'd2:                      begin
                        // op:thread1/OP134
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_39 <= dut_N_Mux_32_2_2_4_46_out1;
                     end
                     
                     3'd3:                      begin
                        if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                        end
                        else begin
                           // op:thread1/OP134
                           // at: dut.cc:71:7
                           // Call Stack: 
                           // in function thread1 called from dut.cc:71:7
                           s_reg_39 <= dut_N_Mux_32_2_2_4_46_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_40
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_40
         // at: dut.cc:71:7
         always @(posedge clk)
          begin :drive_s_reg_40
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        // op:thread1/OP91
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_40 <= {24'b000000000000000000000000, din_data_e};
                     end
                     
                     3'd2:                      begin
                        // op:thread1/OP130
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_40 <= dut_N_Mux_32_2_2_4_45_out1;
                     end
                     
                     3'd3:                      begin
                        if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                        end
                        else begin
                           // op:thread1/OP130
                           // at: dut.cc:71:7
                           // Call Stack: 
                           // in function thread1 called from dut.cc:71:7
                           s_reg_40 <= dut_N_Mux_32_2_2_4_45_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_41
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_41
         // at: dut.cc:71:7
         always @(posedge clk)
          begin :drive_s_reg_41
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        // op:thread1/OP92
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_41 <= {24'b000000000000000000000000, din_data_f};
                     end
                     
                     3'd2:                      begin
                        // op:thread1/OP126
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_41 <= dut_N_Mux_32_2_2_4_44_out1;
                     end
                     
                     3'd3:                      begin
                        if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                        end
                        else begin
                           // op:thread1/OP126
                           // at: dut.cc:71:7
                           // Call Stack: 
                           // in function thread1 called from dut.cc:71:7
                           s_reg_41 <= dut_N_Mux_32_2_2_4_44_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_42
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_42
         // at: dut.cc:71:7
         always @(posedge clk)
          begin :drive_s_reg_42
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        // op:thread1/OP93
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_42 <= {24'b000000000000000000000000, din_data_g};
                     end
                     
                     3'd2:                      begin
                        // op:thread1/OP122
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_42 <= dut_N_Mux_32_2_2_4_43_out1;
                     end
                     
                     3'd3:                      begin
                        if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                        end
                        else begin
                           // op:thread1/OP122
                           // at: dut.cc:71:7
                           // Call Stack: 
                           // in function thread1 called from dut.cc:71:7
                           s_reg_42 <= dut_N_Mux_32_2_2_4_43_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_43
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_43
         // at: dut.cc:71:7
         always @(posedge clk)
          begin :drive_s_reg_43
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        // op:thread1/OP94
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_43 <= {24'b000000000000000000000000, din_data_h};
                     end
                     
                     3'd2:                      begin
                        // op:thread1/OP118
                        // at: dut.cc:71:7
                        // Call Stack: 
                        // in function thread1 called from dut.cc:71:7
                        s_reg_43 <= dut_N_Mux_32_2_2_4_42_out1;
                     end
                     
                     3'd3:                      begin
                        if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                        end
                        else begin
                           // op:thread1/OP118
                           // at: dut.cc:71:7
                           // Call Stack: 
                           // in function thread1 called from dut.cc:71:7
                           s_reg_43 <= dut_N_Mux_32_2_2_4_42_out1;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_44_slice
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_s_reg_44_slice
         // at: dut.cc:54:26
         // at: dut.cc:54:27
         // at: dut.cc:69:16
         always @(posedge clk)
          begin :drive_s_reg_44_slice
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        // op:thread1/OP95
                        // at: dut.cc:54:26
                        // Call Stack: 
                        // in function thread1 called from dut.cc:54:26
                        s_reg_44_slice <= 3'd0;
                     end
                     
                     3'd5:                      begin
                        // op:thread1/OP147
                        // at: dut.cc:54:27
                        // Call Stack: 
                        // in function thread1 called from dut.cc:54:27
                        s_reg_44_slice <= dut_Add_3Ux2S_5S_4_50_out1[2:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_46
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_46
         // at: dut.cc:56:4
         // at: dut.cc:64:5
         always @(posedge clk)
          begin :drive_s_reg_46
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1:                      begin
                        if (dut_LessThan_5Sx5S_1U_4_9_out1) begin
                           // op:thread1/OP107
                           // at: dut.cc:64:5
                           // Call Stack: 
                           // in function thread1 called from dut.cc:64:5
                           s_reg_46 <= dut_N_Mux_3_2_1_4_13_out1;
                        end
                        else begin
                           // op:thread1/OP96
                           // at: dut.cc:56:4
                           // Call Stack: 
                           // in function thread1 called from dut.cc:56:4
                           s_reg_46 <= 3'd0;
                        end
                     end
                     
                     3'd4:                      begin
                        // op:thread1/OP107
                        // at: dut.cc:64:5
                        // Call Stack: 
                        // in function thread1 called from dut.cc:64:5
                        s_reg_46 <= dut_N_Mux_3_2_1_4_13_out1;
                     end
                     
                     3'd6:                      begin
                        if (dut_LessThan_5Sx5S_1U_4_9_out1) begin
                           // op:thread1/OP107
                           // at: dut.cc:64:5
                           // Call Stack: 
                           // in function thread1 called from dut.cc:64:5
                           s_reg_46 <= dut_N_Mux_3_2_1_4_13_out1;
                        end
                        else begin
                           // op:thread1/OP96
                           // at: dut.cc:56:4
                           // Call Stack: 
                           // in function thread1 called from dut.cc:56:4
                           s_reg_46 <= s_reg_44_slice;
                        end
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_47
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_47
         // at: dut.cc:57:31
         // at: dut.cc:57:32
         always @(posedge clk)
          begin :drive_s_reg_47
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     3'd1, 3'd6:                      begin
                        // op:thread1/OP101
                        // at: dut.cc:57:31
                        // Call Stack: 
                        // in function thread1 called from dut.cc:57:31
                        s_reg_47 <= {{ 27 {dut_Add_3Ux2S_5S_4_8_out1[4]}}, dut_Add_3Ux2S_5S_4_8_out1};
                     end
                     
                     3'd3:                      begin
                        /* state12 */
                        // op:thread1/OP108
                        // at: dut.cc:57:32
                        // Call Stack: 
                        // in function thread1 called from dut.cc:57:32
                        s_reg_47 <= dut_Add_32Sx2S_32S_4_14_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_dut_Add_3Ux2S_5S_4_8_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_Add_3Ux2S_5S_4_8_in2
         // at: dut.cc:57:17
         always @(gs_ctrl0 or s_reg_44_slice)
          begin :drive_dut_Add_3Ux2S_5S_4_8_in2
            if (gs_ctrl0) begin
               // op:thread1/OP21
               dut_Add_3Ux2S_5S_4_8_in2 = s_reg_44_slice;
            end
            else begin
               // op:thread1/OP21
               dut_Add_3Ux2S_5S_4_8_in2 = 3'd0;
            end
         end

         // rtl_instance:dut/dut_Add_3Ux2S_5S_4_8
         // Resource=dut_Add_3Ux2S_5S_4, Function=add : Inputs=3,2S Outputs=5S
         // Implements 1 operation(s)
         // at: dut.cc:57:19
         assign dut_Add_3Ux2S_5S_4_8_out1 = {2'b00, dut_Add_3Ux2S_5S_4_8_in2} + 5'd01;

         // rtl_instance:dut/dut_LessThan_5Sx5S_1U_4_9
         // Resource=dut_LessThan_5Sx5S_1U_4, Function=lt : Inputs=5S,5S Outputs=1
         // Implements 1 operation(s)
         // at: dut.cc:57:26
         assign dut_LessThan_5Sx5S_1U_4_9_out1 = dut_Add_3Ux2S_5S_4_8_out1[4] ^ dut_Add_3Ux2S_5S_4_8_out1 < 5'd08;

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_in9
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_in9
         // at: dut.cc:64:21 dut.cc:64:12
         always @(din_data_h or s_reg_43 or gs_ctrl1)
          begin :drive_dut_N_Mux_32_8_0_4_10_in9
            if (gs_ctrl1) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in9 = s_reg_43;
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in9 = {24'b000000000000000000000000, din_data_h};
            end
         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_in8
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_in8
         // at: dut.cc:64:21 dut.cc:64:12
         always @(din_data_g or s_reg_42 or gs_ctrl1)
          begin :drive_dut_N_Mux_32_8_0_4_10_in8
            if (gs_ctrl1) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in8 = s_reg_42;
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in8 = {24'b000000000000000000000000, din_data_g};
            end
         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_in7
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_in7
         // at: dut.cc:64:21 dut.cc:64:12
         always @(din_data_f or s_reg_41 or gs_ctrl1)
          begin :drive_dut_N_Mux_32_8_0_4_10_in7
            if (gs_ctrl1) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in7 = s_reg_41;
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in7 = {24'b000000000000000000000000, din_data_f};
            end
         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_in6
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_in6
         // at: dut.cc:64:21 dut.cc:64:12
         always @(din_data_e or s_reg_40 or gs_ctrl1)
          begin :drive_dut_N_Mux_32_8_0_4_10_in6
            if (gs_ctrl1) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in6 = s_reg_40;
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in6 = {24'b000000000000000000000000, din_data_e};
            end
         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_in5
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_in5
         // at: dut.cc:64:21 dut.cc:64:12
         always @(din_data_d or s_reg_39 or gs_ctrl1)
          begin :drive_dut_N_Mux_32_8_0_4_10_in5
            if (gs_ctrl1) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in5 = s_reg_39;
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in5 = {24'b000000000000000000000000, din_data_d};
            end
         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_in4
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_in4
         // at: dut.cc:64:21 dut.cc:64:12
         always @(din_data_c or s_reg_38 or gs_ctrl1)
          begin :drive_dut_N_Mux_32_8_0_4_10_in4
            if (gs_ctrl1) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in4 = s_reg_38;
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in4 = {24'b000000000000000000000000, din_data_c};
            end
         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_in3
         // at: dut.cc:64:21 dut.cc:64:12
         always @(din_data_b or s_reg_37 or gs_ctrl1)
          begin :drive_dut_N_Mux_32_8_0_4_10_in3
            if (gs_ctrl1) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in3 = s_reg_37;
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in3 = {24'b000000000000000000000000, din_data_b};
            end
         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_in2
         // at: dut.cc:64:21 dut.cc:64:12
         always @(din_data_a or s_reg_36 or gs_ctrl1)
          begin :drive_dut_N_Mux_32_8_0_4_10_in2
            if (gs_ctrl1) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in2 = s_reg_36;
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_10_in2 = {24'b000000000000000000000000, din_data_a};
            end
         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_10_ctrl1
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_10_ctrl1
         // at: dut.cc:64:21
         always @(s_reg_46 or gs_ctrl9 or s_reg_44_slice)
          begin :drive_dut_N_Mux_32_8_0_4_10_ctrl1
            case (gs_ctrl9) 

               2'd1:                begin
                  // op:thread1/OP23
                  dut_N_Mux_32_8_0_4_10_ctrl1 = s_reg_46;
               end
               
               2'd2:                begin
                  // op:thread1/OP23
                  dut_N_Mux_32_8_0_4_10_ctrl1 = s_reg_44_slice;
               end
               
               default:                begin
                  // op:thread1/OP23
                  dut_N_Mux_32_8_0_4_10_ctrl1 = 3'd0;
               end
               
            endcase

         end

         // rtl_instance:dut/dut_N_Mux_32_8_0_4
         always @(dut_N_Mux_32_8_0_4_10_in9 or dut_N_Mux_32_8_0_4_10_in8 or dut_N_Mux_32_8_0_4_10_in7 or dut_N_Mux_32_8_0_4_10_in6 or dut_N_Mux_32_8_0_4_10_in5 or dut_N_Mux_32_8_0_4_10_in4 or dut_N_Mux_32_8_0_4_10_in3 or dut_N_Mux_32_8_0_4_10_in2 or dut_N_Mux_32_8_0_4_10_ctrl1)
          begin :dut_N_Mux_32_8_0_4_10
            case (dut_N_Mux_32_8_0_4_10_ctrl1) 

               3'd0:                begin
                  dut_N_Mux_32_8_0_4_10_out1 = dut_N_Mux_32_8_0_4_10_in2;
               end
               
               3'd1:                begin
                  dut_N_Mux_32_8_0_4_10_out1 = dut_N_Mux_32_8_0_4_10_in3;
               end
               
               3'd2:                begin
                  dut_N_Mux_32_8_0_4_10_out1 = dut_N_Mux_32_8_0_4_10_in4;
               end
               
               3'd3:                begin
                  dut_N_Mux_32_8_0_4_10_out1 = dut_N_Mux_32_8_0_4_10_in5;
               end
               
               3'd4:                begin
                  dut_N_Mux_32_8_0_4_10_out1 = dut_N_Mux_32_8_0_4_10_in6;
               end
               
               3'd5:                begin
                  dut_N_Mux_32_8_0_4_10_out1 = dut_N_Mux_32_8_0_4_10_in7;
               end
               
               3'd6:                begin
                  dut_N_Mux_32_8_0_4_10_out1 = dut_N_Mux_32_8_0_4_10_in8;
               end
               
               default:                begin
                  dut_N_Mux_32_8_0_4_10_out1 = dut_N_Mux_32_8_0_4_10_in9;
               end
               
            endcase

         end

         // rtl_process:dut/drive_dut_N_Mux_32_8_0_4_11_ctrl1
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_32_8_0_4_11_ctrl1
         // at: dut.cc:64:12
         always @(s_reg_47[2:0] or dut_Add_3Ux2S_5S_4_8_out1[2:0] or gs_ctrl18)
          begin :drive_dut_N_Mux_32_8_0_4_11_ctrl1
            if (gs_ctrl18) begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_11_ctrl1 = s_reg_47[2:0];
            end
            else begin
               // op:thread1/OP23
               dut_N_Mux_32_8_0_4_11_ctrl1 = dut_Add_3Ux2S_5S_4_8_out1[2:0];
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_8_0_4
         always @(dut_N_Mux_32_8_0_4_10_in9 or dut_N_Mux_32_8_0_4_10_in8 or dut_N_Mux_32_8_0_4_10_in7 or dut_N_Mux_32_8_0_4_10_in6 or dut_N_Mux_32_8_0_4_10_in5 or dut_N_Mux_32_8_0_4_10_in4 or dut_N_Mux_32_8_0_4_10_in3 or dut_N_Mux_32_8_0_4_10_in2 or dut_N_Mux_32_8_0_4_11_ctrl1)
          begin :dut_N_Mux_32_8_0_4_11
            case (dut_N_Mux_32_8_0_4_11_ctrl1) 

               3'd0:                begin
                  dut_N_Mux_32_8_0_4_11_out1 = dut_N_Mux_32_8_0_4_10_in2;
               end
               
               3'd1:                begin
                  dut_N_Mux_32_8_0_4_11_out1 = dut_N_Mux_32_8_0_4_10_in3;
               end
               
               3'd2:                begin
                  dut_N_Mux_32_8_0_4_11_out1 = dut_N_Mux_32_8_0_4_10_in4;
               end
               
               3'd3:                begin
                  dut_N_Mux_32_8_0_4_11_out1 = dut_N_Mux_32_8_0_4_10_in5;
               end
               
               3'd4:                begin
                  dut_N_Mux_32_8_0_4_11_out1 = dut_N_Mux_32_8_0_4_10_in6;
               end
               
               3'd5:                begin
                  dut_N_Mux_32_8_0_4_11_out1 = dut_N_Mux_32_8_0_4_10_in7;
               end
               
               3'd6:                begin
                  dut_N_Mux_32_8_0_4_11_out1 = dut_N_Mux_32_8_0_4_10_in8;
               end
               
               default:                begin
                  dut_N_Mux_32_8_0_4_11_out1 = dut_N_Mux_32_8_0_4_10_in9;
               end
               
            endcase

         end

         // rtl_instance:dut/dut_LessThan_32Ux32U_1U_4_12
         // Resource=dut_LessThan_32Ux32U_1U_4, Function=lt : Inputs=32,32 Outputs=1
         // Implements 1 operation(s)
         // at: dut.cc:64:16
         assign dut_LessThan_32Ux32U_1U_4_12_out1 = dut_N_Mux_32_8_0_4_11_out1 < dut_N_Mux_32_8_0_4_10_out1;

         // rtl_process:dut/drive_dut_N_Mux_3_2_1_4_13_in3
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_3_2_1_4_13_in3
         // at: dut.cc:64:5
         always @(s_reg_46 or gs_ctrl9 or s_reg_44_slice)
          begin :drive_dut_N_Mux_3_2_1_4_13_in3
            case (gs_ctrl9) 

               2'd1:                begin
                  // op:thread1/OP107
                  // at: dut.cc:64:5
                  // Call Stack: 
                  // in function thread1 called from dut.cc:64:5
                  dut_N_Mux_3_2_1_4_13_in3 = s_reg_46;
               end
               
               2'd2:                begin
                  // op:thread1/OP107
                  // at: dut.cc:64:5
                  // Call Stack: 
                  // in function thread1 called from dut.cc:64:5
                  dut_N_Mux_3_2_1_4_13_in3 = s_reg_44_slice;
               end
               
               default:                begin
                  // op:thread1/OP107
                  // at: dut.cc:64:5
                  // Call Stack: 
                  // in function thread1 called from dut.cc:64:5
                  dut_N_Mux_3_2_1_4_13_in3 = 3'd0;
               end
               
            endcase

         end

         // rtl_process:dut/drive_dut_N_Mux_3_2_1_4_13_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_N_Mux_3_2_1_4_13_in2
         // at: dut.cc:65:16
         always @(s_reg_47[2:0] or dut_Add_3Ux2S_5S_4_8_out1[2:0] or gs_ctrl18)
          begin :drive_dut_N_Mux_3_2_1_4_13_in2
            if (gs_ctrl18) begin
               // op:thread1/OP107
               // at: dut.cc:64:5
               // Call Stack: 
               // in function thread1 called from dut.cc:64:5
               dut_N_Mux_3_2_1_4_13_in2 = s_reg_47[2:0];
            end
            else begin
               // op:thread1/OP107
               // at: dut.cc:64:5
               // Call Stack: 
               // in function thread1 called from dut.cc:64:5
               dut_N_Mux_3_2_1_4_13_in2 = dut_Add_3Ux2S_5S_4_8_out1[2:0];
            end
         end

         // rtl_instance:dut/dut_N_Mux_3_2_1_4
         always @(dut_LessThan_32Ux32U_1U_4_12_out1 or dut_N_Mux_3_2_1_4_13_in3 or dut_N_Mux_3_2_1_4_13_in2)
          begin :dut_N_Mux_3_2_1_4_13
            if (dut_LessThan_32Ux32U_1U_4_12_out1) begin
               dut_N_Mux_3_2_1_4_13_out1 = dut_N_Mux_3_2_1_4_13_in2;
            end
            else begin
               dut_N_Mux_3_2_1_4_13_out1 = dut_N_Mux_3_2_1_4_13_in3;
            end
         end

         // rtl_instance:dut/dut_Add_32Sx2S_32S_4_14
         // Resource=dut_Add_32Sx2S_32S_4, Function=add : Inputs=32S,2S Outputs=32S
         // Implements 1 operation(s)
         // at: dut.cc:57:32
         assign dut_Add_32Sx2S_32S_4_14_out1 = s_reg_47 + 32'd0000000001;

         // rtl_instance:dut/dut_LessThan_33Sx33S_1U_4_15
         // Resource=dut_LessThan_33Sx33S_1U_4, Function=lt : Inputs=33S,33S Outputs=1
         // Implements 1 operation(s)
         // at: dut.cc:57:26
         assign dut_LessThan_33Sx33S_1U_4_15_out1 = dut_Add_32Sx2S_32S_4_14_out1[31] ^ {dut_Add_32Sx2S_32S_4_14_out1[31], dut_Add_32Sx2S_32S_4_14_out1} < 33'd0000000008;

         // rtl_instance:dut/dut_Equal_3Ux3U_1U_4_16
         // Resource=dut_Equal_3Ux3U_1U_4, Function=eq : Inputs=3,3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:70:7
         assign dut_Equal_3Ux3U_1U_4_16_out1 = s_reg_44_slice == 3'd7;

         // rtl_instance:dut/dut_Equal_3Ux3U_1U_4_17
         // Resource=dut_Equal_3Ux3U_1U_4, Function=eq : Inputs=3,3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:70:7
         assign dut_Equal_3Ux3U_1U_4_17_out1 = s_reg_44_slice == 3'd6;

         // rtl_instance:dut/dut_Equal_3Ux3U_1U_4_18
         // Resource=dut_Equal_3Ux3U_1U_4, Function=eq : Inputs=3,3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:70:7
         assign dut_Equal_3Ux3U_1U_4_18_out1 = s_reg_44_slice == 3'd5;

         // rtl_instance:dut/dut_Equal_3Ux3U_1U_4_19
         // Resource=dut_Equal_3Ux3U_1U_4, Function=eq : Inputs=3,3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:70:7
         assign dut_Equal_3Ux3U_1U_4_19_out1 = s_reg_44_slice == 3'd4;

         // rtl_instance:dut/dut_Equal_3Ux2U_1U_4_20
         // Resource=dut_Equal_3Ux2U_1U_4, Function=eq : Inputs=3,2 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:70:7
         assign dut_Equal_3Ux2U_1U_4_20_out1 = s_reg_44_slice == 3'd3;

         // rtl_instance:dut/dut_Equal_3Ux2U_1U_4_21
         // Resource=dut_Equal_3Ux2U_1U_4, Function=eq : Inputs=3,2 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:70:7
         assign dut_Equal_3Ux2U_1U_4_21_out1 = s_reg_44_slice == 3'd2;

         // rtl_instance:dut/dut_Equal_3Ux1U_1U_4_22
         // Resource=dut_Equal_3Ux1U_1U_4, Function=eq : Inputs=3,1 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:70:7
         assign dut_Equal_3Ux1U_1U_4_22_out1 = s_reg_44_slice == 3'd1;

         // rtl_instance:dut/dut_OrReduction_3U_1U_4_23
         // Resource=dut_OrReduction_3U_1U_4, Function=or : Inputs=3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:70:7
         assign dut_OrReduction_3U_1U_4_23_out1 = (|s_reg_44_slice);

         // rtl_instance:dut/dut_N_Mux_32_8_0_4
         always @(s_reg_36 or s_reg_37 or s_reg_38 or s_reg_39 or s_reg_40 or s_reg_41 or s_reg_42 or s_reg_43 or s_reg_44_slice)
          begin :dut_N_Mux_32_8_0_4_24
            case (s_reg_44_slice) 

               3'd0:                begin
                  dut_N_Mux_32_8_0_4_24_out1 = s_reg_36;
               end
               
               3'd1:                begin
                  dut_N_Mux_32_8_0_4_24_out1 = s_reg_37;
               end
               
               3'd2:                begin
                  dut_N_Mux_32_8_0_4_24_out1 = s_reg_38;
               end
               
               3'd3:                begin
                  dut_N_Mux_32_8_0_4_24_out1 = s_reg_39;
               end
               
               3'd4:                begin
                  dut_N_Mux_32_8_0_4_24_out1 = s_reg_40;
               end
               
               3'd5:                begin
                  dut_N_Mux_32_8_0_4_24_out1 = s_reg_41;
               end
               
               3'd6:                begin
                  dut_N_Mux_32_8_0_4_24_out1 = s_reg_42;
               end
               
               default:                begin
                  dut_N_Mux_32_8_0_4_24_out1 = s_reg_43;
               end
               
            endcase

         end

         // rtl_instance:dut/dut_Equal_3Ux3U_1U_4_25
         // Resource=dut_Equal_3Ux3U_1U_4, Function=eq : Inputs=3,3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:71:7
         assign dut_Equal_3Ux3U_1U_4_25_out1 = s_reg_46 == 3'd7;

         // rtl_instance:dut/dut_Equal_3Ux3U_1U_4_26
         // Resource=dut_Equal_3Ux3U_1U_4, Function=eq : Inputs=3,3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:71:7
         assign dut_Equal_3Ux3U_1U_4_26_out1 = s_reg_46 == 3'd6;

         // rtl_instance:dut/dut_Equal_3Ux3U_1U_4_27
         // Resource=dut_Equal_3Ux3U_1U_4, Function=eq : Inputs=3,3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:71:7
         assign dut_Equal_3Ux3U_1U_4_27_out1 = s_reg_46 == 3'd5;

         // rtl_instance:dut/dut_Equal_3Ux3U_1U_4_28
         // Resource=dut_Equal_3Ux3U_1U_4, Function=eq : Inputs=3,3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:71:7
         assign dut_Equal_3Ux3U_1U_4_28_out1 = s_reg_46 == 3'd4;

         // rtl_instance:dut/dut_Equal_3Ux2U_1U_4_29
         // Resource=dut_Equal_3Ux2U_1U_4, Function=eq : Inputs=3,2 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:71:7
         assign dut_Equal_3Ux2U_1U_4_29_out1 = s_reg_46 == 3'd3;

         // rtl_instance:dut/dut_Equal_3Ux2U_1U_4_30
         // Resource=dut_Equal_3Ux2U_1U_4, Function=eq : Inputs=3,2 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:71:7
         assign dut_Equal_3Ux2U_1U_4_30_out1 = s_reg_46 == 3'd2;

         // rtl_instance:dut/dut_Equal_3Ux1U_1U_4_31
         // Resource=dut_Equal_3Ux1U_1U_4, Function=eq : Inputs=3,1 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:71:7
         assign dut_Equal_3Ux1U_1U_4_31_out1 = s_reg_46 == 3'd1;

         // rtl_instance:dut/dut_OrReduction_3U_1U_4_32
         // Resource=dut_OrReduction_3U_1U_4, Function=or : Inputs=3 Outputs=1
         // Implements 2 operation(s)
         // at: dut.cc:71:7
         assign dut_OrReduction_3U_1U_4_32_out1 = (|s_reg_46);

         // rtl_instance:dut/dut_N_Mux_32_8_0_4
         always @(s_reg_36 or s_reg_37 or s_reg_38 or s_reg_39 or s_reg_40 or s_reg_41 or s_reg_42 or s_reg_43 or s_reg_46)
          begin :dut_N_Mux_32_8_0_4_33
            case (s_reg_46) 

               3'd0:                begin
                  dut_N_Mux_32_8_0_4_33_out1 = s_reg_36;
               end
               
               3'd1:                begin
                  dut_N_Mux_32_8_0_4_33_out1 = s_reg_37;
               end
               
               3'd2:                begin
                  dut_N_Mux_32_8_0_4_33_out1 = s_reg_38;
               end
               
               3'd3:                begin
                  dut_N_Mux_32_8_0_4_33_out1 = s_reg_39;
               end
               
               3'd4:                begin
                  dut_N_Mux_32_8_0_4_33_out1 = s_reg_40;
               end
               
               3'd5:                begin
                  dut_N_Mux_32_8_0_4_33_out1 = s_reg_41;
               end
               
               3'd6:                begin
                  dut_N_Mux_32_8_0_4_33_out1 = s_reg_42;
               end
               
               default:                begin
                  dut_N_Mux_32_8_0_4_33_out1 = s_reg_43;
               end
               
            endcase

         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(s_reg_43 or dut_Equal_3Ux3U_1U_4_16_out1 or dut_N_Mux_32_8_0_4_33_out1)
          begin :dut_N_Mux_32_2_2_4_34
            if (dut_Equal_3Ux3U_1U_4_16_out1) begin
               dut_N_Mux_32_2_2_4_34_out1 = dut_N_Mux_32_8_0_4_33_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_34_out1 = s_reg_43;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(s_reg_42 or dut_Equal_3Ux3U_1U_4_17_out1 or dut_N_Mux_32_8_0_4_33_out1)
          begin :dut_N_Mux_32_2_2_4_35
            if (dut_Equal_3Ux3U_1U_4_17_out1) begin
               dut_N_Mux_32_2_2_4_35_out1 = dut_N_Mux_32_8_0_4_33_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_35_out1 = s_reg_42;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(s_reg_41 or dut_Equal_3Ux3U_1U_4_18_out1 or dut_N_Mux_32_8_0_4_33_out1)
          begin :dut_N_Mux_32_2_2_4_36
            if (dut_Equal_3Ux3U_1U_4_18_out1) begin
               dut_N_Mux_32_2_2_4_36_out1 = dut_N_Mux_32_8_0_4_33_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_36_out1 = s_reg_41;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(s_reg_40 or dut_Equal_3Ux3U_1U_4_19_out1 or dut_N_Mux_32_8_0_4_33_out1)
          begin :dut_N_Mux_32_2_2_4_37
            if (dut_Equal_3Ux3U_1U_4_19_out1) begin
               dut_N_Mux_32_2_2_4_37_out1 = dut_N_Mux_32_8_0_4_33_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_37_out1 = s_reg_40;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(s_reg_39 or dut_Equal_3Ux2U_1U_4_20_out1 or dut_N_Mux_32_8_0_4_33_out1)
          begin :dut_N_Mux_32_2_2_4_38
            if (dut_Equal_3Ux2U_1U_4_20_out1) begin
               dut_N_Mux_32_2_2_4_38_out1 = dut_N_Mux_32_8_0_4_33_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_38_out1 = s_reg_39;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(s_reg_38 or dut_Equal_3Ux2U_1U_4_21_out1 or dut_N_Mux_32_8_0_4_33_out1)
          begin :dut_N_Mux_32_2_2_4_39
            if (dut_Equal_3Ux2U_1U_4_21_out1) begin
               dut_N_Mux_32_2_2_4_39_out1 = dut_N_Mux_32_8_0_4_33_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_39_out1 = s_reg_38;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(s_reg_37 or dut_Equal_3Ux1U_1U_4_22_out1 or dut_N_Mux_32_8_0_4_33_out1)
          begin :dut_N_Mux_32_2_2_4_40
            if (dut_Equal_3Ux1U_1U_4_22_out1) begin
               dut_N_Mux_32_2_2_4_40_out1 = dut_N_Mux_32_8_0_4_33_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_40_out1 = s_reg_37;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(s_reg_36 or dut_OrReduction_3U_1U_4_23_out1 or dut_N_Mux_32_8_0_4_33_out1)
          begin :dut_N_Mux_32_2_2_4_41
            if (dut_OrReduction_3U_1U_4_23_out1) begin
               dut_N_Mux_32_2_2_4_41_out1 = s_reg_36;
            end
            else begin
               dut_N_Mux_32_2_2_4_41_out1 = dut_N_Mux_32_8_0_4_33_out1;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(dut_N_Mux_32_8_0_4_24_out1 or dut_Equal_3Ux3U_1U_4_25_out1 or dut_N_Mux_32_2_2_4_34_out1)
          begin :dut_N_Mux_32_2_2_4_42
            if (dut_Equal_3Ux3U_1U_4_25_out1) begin
               dut_N_Mux_32_2_2_4_42_out1 = dut_N_Mux_32_8_0_4_24_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_42_out1 = dut_N_Mux_32_2_2_4_34_out1;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(dut_N_Mux_32_8_0_4_24_out1 or dut_Equal_3Ux3U_1U_4_26_out1 or dut_N_Mux_32_2_2_4_35_out1)
          begin :dut_N_Mux_32_2_2_4_43
            if (dut_Equal_3Ux3U_1U_4_26_out1) begin
               dut_N_Mux_32_2_2_4_43_out1 = dut_N_Mux_32_8_0_4_24_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_43_out1 = dut_N_Mux_32_2_2_4_35_out1;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(dut_N_Mux_32_8_0_4_24_out1 or dut_Equal_3Ux3U_1U_4_27_out1 or dut_N_Mux_32_2_2_4_36_out1)
          begin :dut_N_Mux_32_2_2_4_44
            if (dut_Equal_3Ux3U_1U_4_27_out1) begin
               dut_N_Mux_32_2_2_4_44_out1 = dut_N_Mux_32_8_0_4_24_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_44_out1 = dut_N_Mux_32_2_2_4_36_out1;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(dut_N_Mux_32_8_0_4_24_out1 or dut_Equal_3Ux3U_1U_4_28_out1 or dut_N_Mux_32_2_2_4_37_out1)
          begin :dut_N_Mux_32_2_2_4_45
            if (dut_Equal_3Ux3U_1U_4_28_out1) begin
               dut_N_Mux_32_2_2_4_45_out1 = dut_N_Mux_32_8_0_4_24_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_45_out1 = dut_N_Mux_32_2_2_4_37_out1;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(dut_N_Mux_32_8_0_4_24_out1 or dut_Equal_3Ux2U_1U_4_29_out1 or dut_N_Mux_32_2_2_4_38_out1)
          begin :dut_N_Mux_32_2_2_4_46
            if (dut_Equal_3Ux2U_1U_4_29_out1) begin
               dut_N_Mux_32_2_2_4_46_out1 = dut_N_Mux_32_8_0_4_24_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_46_out1 = dut_N_Mux_32_2_2_4_38_out1;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(dut_N_Mux_32_8_0_4_24_out1 or dut_Equal_3Ux2U_1U_4_30_out1 or dut_N_Mux_32_2_2_4_39_out1)
          begin :dut_N_Mux_32_2_2_4_47
            if (dut_Equal_3Ux2U_1U_4_30_out1) begin
               dut_N_Mux_32_2_2_4_47_out1 = dut_N_Mux_32_8_0_4_24_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_47_out1 = dut_N_Mux_32_2_2_4_39_out1;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(dut_N_Mux_32_8_0_4_24_out1 or dut_Equal_3Ux1U_1U_4_31_out1 or dut_N_Mux_32_2_2_4_40_out1)
          begin :dut_N_Mux_32_2_2_4_48
            if (dut_Equal_3Ux1U_1U_4_31_out1) begin
               dut_N_Mux_32_2_2_4_48_out1 = dut_N_Mux_32_8_0_4_24_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_48_out1 = dut_N_Mux_32_2_2_4_40_out1;
            end
         end

         // rtl_instance:dut/dut_N_Mux_32_2_2_4
         always @(dut_N_Mux_32_8_0_4_24_out1 or dut_OrReduction_3U_1U_4_32_out1 or dut_N_Mux_32_2_2_4_41_out1)
          begin :dut_N_Mux_32_2_2_4_49
            if (dut_OrReduction_3U_1U_4_32_out1) begin
               dut_N_Mux_32_2_2_4_49_out1 = dut_N_Mux_32_2_2_4_41_out1;
            end
            else begin
               dut_N_Mux_32_2_2_4_49_out1 = dut_N_Mux_32_8_0_4_24_out1;
            end
         end

         // rtl_instance:dut/dut_Add_3Ux2S_5S_4_50
         // Resource=dut_Add_3Ux2S_5S_4, Function=add : Inputs=3,2S Outputs=5S
         // Implements 1 operation(s)
         // at: dut.cc:54:27
         assign dut_Add_3Ux2S_5S_4_50_out1 = {2'b00, s_reg_44_slice} + 5'd01;

         // rtl_instance:dut/dut_LessThan_5Sx4S_1U_4_51
         // Resource=dut_LessThan_5Sx4S_1U_4, Function=lt : Inputs=5S,4S Outputs=1
         // Implements 1 operation(s)
         // at: dut.cc:54:21
         assign dut_LessThan_5Sx4S_1U_4_51_out1 = dut_Add_3Ux2S_5S_4_50_out1[4] ^ dut_Add_3Ux2S_5S_4_50_out1 < 5'd07;

         // rtl_process:dut/drive_global_state
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB18 : SCHED_9
         //    FSM: global_state == 3
         // BB19 : SCHED_6
         //    FSM: global_state == 2
         // BB21 : SCHED_11
         //    FSM: global_state == 4
         // BB22 : SCHED_12
         //    FSM: global_state == 5
         // BB25 : SCHED_14
         //    FSM: global_state == 6
         // BB28 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 7
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               // basic_block:gen_do_stall_reg_full/BB8
               global_state <= 3'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_global_state_next
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB18 : SCHED_9
         //    FSM: global_state == 3
         // BB19 : SCHED_6
         //    FSM: global_state == 2
         // BB21 : SCHED_11
         //    FSM: global_state == 4
         // BB22 : SCHED_12
         //    FSM: global_state == 5
         // BB25 : SCHED_14
         //    FSM: global_state == 6
         // BB28 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 7
         always @(dut_LessThan_5Sx5S_1U_4_9_out1 or dut_LessThan_33Sx33S_1U_4_15_out1 or dut_LessThan_5Sx4S_1U_4_51_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               3'd1, 3'd6:                begin
                  if (dut_LessThan_5Sx5S_1U_4_9_out1) begin
                     // basic_block:thread1/BB18
                     global_state_next = 3'd3;
                  end
                  else begin
                     // basic_block:thread1/BB19
                     global_state_next = 3'd2;
                  end
               end
               
               3'd2:                begin
                  // basic_block:thread1/BB22
                  global_state_next = 3'd5;
               end
               
               3'd3:                begin
                  if (dut_LessThan_33Sx33S_1U_4_15_out1) begin
                     global_state_next = global_state + 3'd1;
                  end
                  else begin
                     // basic_block:thread1/BB22
                     global_state_next = 3'd5;
                  end
               end
               
               3'd4:                begin
                  // basic_block:thread1/BB18
                  global_state_next = 3'd3;
               end
               
               3'd5:                begin
                  if (dut_LessThan_5Sx4S_1U_4_51_out1) begin
                     global_state_next = global_state + 3'd1;
                  end
                  else begin
                     // basic_block:thread1/BB28
                     global_state_next = 3'd7;
                  end
               end
               
               default:                begin
                  // basic_block:thread1/BB7
                  global_state_next = 3'd1;
               end
               
            endcase

         end

         // rtl_process:dut/drive_gs_ctrl0
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB18 : SCHED_9
         //    FSM: global_state == 3
         // BB19 : SCHED_6
         //    FSM: global_state == 2
         // BB21 : SCHED_11
         //    FSM: global_state == 4
         // BB22 : SCHED_12
         //    FSM: global_state == 5
         // BB25 : SCHED_14
         //    FSM: global_state == 6
         // BB28 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 7
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd6:                         begin
                           gs_ctrl0 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_gs_ctrl1
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB18 : SCHED_9
         //    FSM: global_state == 3
         // BB19 : SCHED_6
         //    FSM: global_state == 2
         // BB21 : SCHED_11
         //    FSM: global_state == 4
         // BB22 : SCHED_12
         //    FSM: global_state == 5
         // BB25 : SCHED_14
         //    FSM: global_state == 6
         // BB28 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 7
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (rst == 1'b0) begin
               gs_ctrl1 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd4, 3'd6:                         begin
                           gs_ctrl1 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_gs_ctrl9
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB18 : SCHED_9
         //    FSM: global_state == 3
         // BB19 : SCHED_6
         //    FSM: global_state == 2
         // BB21 : SCHED_11
         //    FSM: global_state == 4
         // BB22 : SCHED_12
         //    FSM: global_state == 5
         // BB25 : SCHED_14
         //    FSM: global_state == 6
         // BB28 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 7
         always @(posedge clk)
          begin :drive_gs_ctrl9
            if (rst == 1'b0) begin
               gs_ctrl9 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd4:                         begin
                           gs_ctrl9 <= 2'd1;
                        end
                        
                        3'd6:                         begin
                           gs_ctrl9 <= 2'd2;
                        end
                        
                        default:                         begin
                           gs_ctrl9 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_gs_ctrl18
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB18 : SCHED_9
         //    FSM: global_state == 3
         // BB19 : SCHED_6
         //    FSM: global_state == 2
         // BB21 : SCHED_11
         //    FSM: global_state == 4
         // BB22 : SCHED_12
         //    FSM: global_state == 5
         // BB25 : SCHED_14
         //    FSM: global_state == 6
         // BB28 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 7
         always @(posedge clk)
          begin :drive_gs_ctrl18
            if (rst == 1'b0) begin
               gs_ctrl18 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        3'd4:                         begin
                           gs_ctrl18 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl18 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_din_busy
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_din_busy
         // at: cynw_p2p.h:1771:13
         assign din_busy = dut_gen_busy_r_1_2_out1[2];

         // rtl_instance:dut/dut_gen_busy_r_1_2
         // Resource=dut_gen_busy_r_1, Function=not not and and or : Inputs=1,1,1 Outputs=3
         // Implements 1 operation(s)
         // at: cynw_p2p.h:1739:8
         assign dut_gen_busy_r_1_2_out1 = {dut_gen_busy_r_1_2_gnew_req, {dut_gen_busy_r_1_2_gdiv, dut_gen_busy_r_1_2_gen_busy_din_m_data_is_invalid_next}};

         // rtl_instance:dut/dut_gen_busy_r_1_2
         // This resource is split across multiple concurrent processes.
         // See line:1464
         assign dut_gen_busy_r_1_2_gen_busy_din_m_data_is_invalid_next = ~dut_gen_busy_r_1_2_gdiv;

         // rtl_instance:dut/dut_gen_busy_r_1_2
         // This resource is split across multiple concurrent processes.
         // See line:1464
         assign dut_gen_busy_r_1_2_gdiv = din_vld & !dut_gen_busy_r_1_2_gnew_req;

         // rtl_instance:dut/dut_gen_busy_r_1_2
         // This resource is split across multiple concurrent processes.
         // See line:1464
         assign dut_gen_busy_r_1_2_gnew_req = din_m_busy_req_0 & (din_m_unvalidated_req | din_vld);

         // rtl_process:dut/drive_din_m_unvalidated_req
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_din_m_unvalidated_req
         // at: cynw_p2p.h:1802:2
         // at: cynw_p2p.h:1796:10
         // at: cynw_p2p.h:1807:13
         // at: cynw_p2p.h:1761:36
         always @(posedge clk)
          begin :drive_din_m_unvalidated_req
            if (rst == 1'b0) begin
               // op:gen_unvalidated_req/OP0
               // at: cynw_p2p.h:1802:2
               // Call Stack: 
               // in function gen_unvalidated_req called from cynw_p2p.h:1802:2
               din_m_unvalidated_req <= 1'd1;
            end
            else begin
               // op:gen_unvalidated_req/OP6
               // at: cynw_p2p.h:1807:13
               // Call Stack: 
               // in function gen_unvalidated_req called from cynw_p2p.h:1807:13
               din_m_unvalidated_req <= dut_N_Muxb_1_2_3_4_1_out1;
            end
         end

         // rtl_instance:dut/dut_N_Muxb_1_2_3_4
         // This resource is split across multiple concurrent processes.
         // See line:1464
         always @(din_vld or din_m_busy_req_0 or din_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_3_4_1
            if (din_m_busy_req_0) begin
               dut_N_Muxb_1_2_3_4_1_out1 = din_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_3_4_1_out1 = din_vld;
            end
         end

         // rtl_process:dut/drive_dout_vld
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dout_vld
         // at: cynw_p2p.h:5144:18
         assign dout_vld = dut_Or_1Ux1U_1U_4_5_out1;

         // rtl_instance:dut/dut_Or_1Ux1U_1U_4_5
         // Resource=dut_Or_1Ux1U_1U_4, Function=or : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: cynw_p2p.h:5144:50
         assign dut_Or_1Ux1U_1U_4_5_out1 = dout_m_unacked_req | dut_Xor_1Ux1U_1U_1_4_out1;

         // rtl_process:dut/drive_dout_m_unacked_req
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dout_m_unacked_req
         // at: cynw_p2p.h:5144:29
         // at: cynw_p2p.h:5156:9
         // at: cynw_p2p.h:5159:9
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               // op:gen_unacked_req/OP55
               // at: cynw_p2p.h:5156:9
               // Call Stack: 
               // in function gen_unacked_req called from cynw_p2p.h:5156:9
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               // op:gen_unacked_req/OP57
               // at: cynw_p2p.h:5159:9
               // Call Stack: 
               // in function gen_unacked_req called from cynw_p2p.h:5159:9
               dout_m_unacked_req <= dut_And_1Ux1U_1U_1_6_out1;
            end
         end

         // rtl_instance:dut/dut_And_1Ux1U_1U_1_6
         // Resource=dut_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: cynw_p2p.h:5171:43
         assign dut_And_1Ux1U_1U_1_6_out1 = dout_busy & dout_vld;

         // rtl_instance:dut/dut_Xor_1Ux1U_1U_1_4
         // Resource=dut_Xor_1Ux1U_1U_1, Function=xor : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: cynw_comm_util.h:1331:70
         assign dut_Xor_1Ux1U_1U_1_4_out1 = dout_m_req_m_trig_req ^ dout_m_req_m_prev_trig_req;

         // rtl_process:dut/drive_dout_m_req_m_prev_trig_req
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dout_m_req_m_prev_trig_req
         // at: cynw_comm_util.h:1343:9
         // at: cynw_comm_util.h:1345:9
         // at: cynw_comm_util.h:1331:73
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               // op:gen_prev_trig_reg/OP10
               // at: cynw_comm_util.h:1343:9
               // Call Stack: 
               // in function gen_prev_trig_reg called from cynw_comm_util.h:1343:9
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               // op:gen_prev_trig_reg/OP12
               // at: cynw_comm_util.h:1345:9
               // Call Stack: 
               // in function gen_prev_trig_reg called from cynw_comm_util.h:1345:9
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end

         // rtl_instance:dut/dut_Not_1U_1U_1_7
         // Resource=dut_Not_1U_1U_1, Function=not : Inputs=1 Outputs=1
         // Implements 1 operation(s)
         // at: cynw_comm_util.h:1367:25
         assign dut_Not_1U_1U_1_7_out1 = !dout_m_req_m_trig_req;


endmodule


