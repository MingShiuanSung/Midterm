// Generated by stratus_hls 19.12-s100  (91710.131054)
// Mon Apr 18 10:40:55 2022
// from dut.cc

`timescale 1ps / 1ps

      
module dut(clk, rst, din_busy, din_vld, din_data_a, din_data_b, din_data_c, din_data_d, din_data_e, din_data_f, din_data_g, din_data_h, dout_busy, dout_vld, dout_data);

      input clk;
      input rst;
      input din_vld;
      input [7:0] din_data_a;
      input [7:0] din_data_b;
      input [7:0] din_data_c;
      input [7:0] din_data_d;
      input [7:0] din_data_e;
      input [7:0] din_data_f;
      input [7:0] din_data_g;
      input [7:0] din_data_h;
      input dout_busy;
      output din_busy;
      output dout_vld;
      output [255:0] dout_data;
      reg [255:0] dout_data;
      reg dout_m_req_m_prev_trig_req;
      reg dout_m_unacked_req;
      wire dut_Xor_1Ux1U_1U_1_4_out1;
      wire dut_Or_1Ux1U_1U_4_5_out1;
      reg dut_N_Muxb_1_2_1_4_1_out1;
      reg din_m_unvalidated_req;
      wire dut_gen_busy_r_1_2_gnew_req;
      wire dut_gen_busy_r_1_2_gdiv;
      wire dut_gen_busy_r_1_2_gen_busy_din_m_data_is_invalid_next;
      reg[4:0] global_state_next;
      wire dut_LessThan_32Ux32U_1U_4_12_out1;
      reg[2:0] dut_Add_3Ux2S_5S_4_8_in2;
      reg gs_ctrl4;
      reg gs_ctrl3;
      wire dut_LessThan_5Sx5S_1U_4_9_out1;
      reg[1:0] gs_ctrl2;
      reg[3:0] gs_ctrl1;
      reg[3:0] gs_ctrl0;
      wire dut_LessThan_33Sx33S_1U_4_11_out1;
      /*signed*/wire[31:0] dut_Add_32Sx2S_32S_4_10_out1;
      /*signed*/wire[4:0] dut_Add_3Ux2S_5S_4_8_out1;
      reg[2:0] dut_N_Mux_3_2_0_4_13_out1;
      reg[2:0] s_reg_42;
      wire dut_LessThan_5Sx4S_1U_4_15_out1;
      reg s_reg_41;
      /*signed*/wire[4:0] dut_Add_3Ux2S_5S_4_14_out1;
      reg s_reg_46;
      reg[7:0] s_reg_40;
      reg[7:0] s_reg_39;
      reg[7:0] s_reg_38;
      reg[7:0] s_reg_37;
      reg[7:0] s_reg_36;
      reg[7:0] s_reg_35;
      reg[7:0] s_reg_34;
      wire[2:0] dut_gen_busy_r_1_2_out1;
      wire dut_And_1Ux1U_1U_1_6_out1;
      wire dut_Not_1U_1U_1_7_out1;
      reg dout_m_req_m_trig_req;
      reg[4:0] global_state;
      reg din_m_busy_req_0;
      reg[31:0] s_reg_50;
      reg[31:0] s_reg_49;
      reg[31:0] s_reg_48;
      reg[31:0] s_reg_47;
      reg[31:0] s_reg_45;
      reg[31:0] s_reg_43;
      reg[31:0] s_reg_44;
      reg stall0;
      reg[31:0] arr_DIN;
      reg arr_CE;
      reg arr_RW;
      reg[2:0] arr_in1;
      wire[31:0] arr_out1;

         // rtl_instance:dut/arr
         // Resource=dut_RAM_8X32_1, Function=RAM : Inputs=32,1,1,3,1 Outputs=32
         // Implements 22 operation(s)
         // at: dut.cc:43:6
         // at: dut.cc:44:6
         // at: dut.cc:45:6
         // at: dut.cc:46:6
         // at: dut.cc:47:6
         // at: dut.cc:48:6
         // at: dut.cc:49:6
         // at: dut.cc:50:6
         // at: dut.cc:65:21
         // at: dut.cc:65:12
         // at: dut.cc:70:16
         // at: dut.cc:71:16
         // at: dut.cc:71:7
         // at: dut.cc:72:7
         // at: dut.cc:76:34
         // at: dut.cc:77:34
         // at: dut.cc:78:34
         // at: dut.cc:79:34
         // at: dut.cc:80:34
         // at: dut.cc:81:34
         // at: dut.cc:82:34
         // at: dut.cc:83:34
         dut_RAM_8X32_1 arr(
                          .DIN( arr_DIN ),
                          .CE( arr_CE ),
                          .RW( arr_RW ),
                          .in1( arr_in1 ),
                          .out1( arr_out1 ),
                          .clk( clk )
                        );

         // rtl_process:dut/drive_dout_data
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dout_data
         // at: cynw_p2p.h:5278:13
         always @(posedge clk)
          begin :drive_dout_data
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  // op:thread1/OP120
                  // at: cynw_p2p.h:5278:13
                  // Call Stack: 
                  // in function nb_put_work called from cynw_p2p.h:5063:7
                  // in function put called from dut.cc:85:8
                  dout_data <= {arr_out1, {s_reg_50, {s_reg_49, {s_reg_48, {s_reg_47, {s_reg_45, {s_reg_43, s_reg_44}}}}}}};
               end
               
            endcase

         end

         // rtl_process:dut/drive_din_m_busy_req_0
         // Sharing or Control mux
         // Sharing/Controlling 5 operation(s) on drive_din_m_busy_req_0
         // at: cynw_p2p.h:1806:17
         // at: cynw_p2p.h:1761:12
         // at: cynw_p2p.h:1515:2
         // at: cynw_p2p.h:1595:7
         // at: cynw_p2p.h:1620:7
         always @(posedge clk)
          begin :drive_din_m_busy_req_0
            if (rst == 1'b0) begin
               // op:thread1/OP63
               // at: cynw_p2p.h:1515:2
               // Call Stack: 
               // in function reset called from dut.cc:33:7
               din_m_busy_req_0 <= 1'd1;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd00, 5'd26:                         begin
                           // op:thread1/OP67
                           // at: cynw_p2p.h:1595:7
                           // Call Stack: 
                           // in function get_start called from cynw_p2p.h:1455:7
                           // in function get called from dut.cc:41:23
                           din_m_busy_req_0 <= 1'd0;
                        end
                        
                        5'd01:                         begin
                           // op:thread1/OP70
                           // at: cynw_p2p.h:1620:7
                           // Call Stack: 
                           // in function get_end called from cynw_p2p.h:1478:7
                           // in function get called from dut.cc:41:23
                           din_m_busy_req_0 <= 1'd1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_dout_m_req_m_trig_req
         // Sharing or Control mux
         // Sharing/Controlling 5 operation(s) on drive_dout_m_req_m_trig_req
         // at: cynw_comm_util.h:1345:27
         // at: cynw_comm_util.h:1331:52
         // at: cynw_comm_util.h:1367:26
         // at: cynw_comm_util.h:1293:7
         // at: cynw_comm_util.h:1286:2
         always @(posedge clk)
          begin :drive_dout_m_req_m_trig_req
            if (rst == 1'b0) begin
               // op:thread1/OP65
               // at: cynw_comm_util.h:1293:7
               // Call Stack: 
               // in function reset called from cynw_p2p.h:5087:13
               // in function reset called from dut.cc:34:8
               dout_m_req_m_trig_req <= 1'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state) 

                        5'd25:                         begin
                           // op:thread1/OP122
                           // at: cynw_comm_util.h:1286:2
                           // Call Stack: 
                           // in function trig called from cynw_p2p.h:5279:8
                           // in function nb_put_work called from cynw_p2p.h:5063:7
                           // in function put called from dut.cc:85:8
                           dout_m_req_m_trig_req <= dut_Not_1U_1U_1_7_out1;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_stall0
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_stall0
         // at: cynw_p2p.h:1532:33
         // at: cynw_p2p.h:1849:47
         // at: cynw_p2p.h:1464:9
         // at: cynw_p2p.h:5071:2
         always @(dut_gen_busy_r_1_2_out1[0] or dut_And_1Ux1U_1U_1_6_out1 or global_state)
          begin :drive_stall0
            case (global_state) 

               5'd01:                begin
                  // op:thread1/OP69
                  // at: cynw_p2p.h:1464:9
                  // Call Stack: 
                  // in function get called from dut.cc:41:23
                  stall0 = dut_gen_busy_r_1_2_out1[0];
               end
               
               5'd26:                begin
                  // op:thread1/OP124
                  // at: cynw_p2p.h:5071:2
                  // Call Stack: 
                  // in function put called from dut.cc:85:8
                  stall0 = dut_And_1Ux1U_1U_1_6_out1;
               end
               
               default:                begin
                  stall0 = 1'b0;
               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_34
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_34
         // at: input_t.h:79:16
         always @(posedge clk)
          begin :drive_s_reg_34
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        // op:thread1/OP73
                        // at: input_t.h:79:16
                        // Call Stack: 
                        // in function copy called from input_t.h:43:9
                        // in function input_t called from cynw_p2p.h:1721:2
                        // in function use_data called from cynw_p2p.h:1558:8
                        // in function nb_get called from cynw_p2p.h:1481:7
                        // in function get called from dut.cc:41:23
                        s_reg_34 <= din_data_c;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_35
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_35
         // at: input_t.h:80:16
         always @(posedge clk)
          begin :drive_s_reg_35
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        // op:thread1/OP74
                        // at: input_t.h:80:16
                        // Call Stack: 
                        // in function copy called from input_t.h:43:9
                        // in function input_t called from cynw_p2p.h:1721:2
                        // in function use_data called from cynw_p2p.h:1558:8
                        // in function nb_get called from cynw_p2p.h:1481:7
                        // in function get called from dut.cc:41:23
                        s_reg_35 <= din_data_d;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_36
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_36
         // at: input_t.h:81:16
         always @(posedge clk)
          begin :drive_s_reg_36
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        // op:thread1/OP75
                        // at: input_t.h:81:16
                        // Call Stack: 
                        // in function copy called from input_t.h:43:9
                        // in function input_t called from cynw_p2p.h:1721:2
                        // in function use_data called from cynw_p2p.h:1558:8
                        // in function nb_get called from cynw_p2p.h:1481:7
                        // in function get called from dut.cc:41:23
                        s_reg_36 <= din_data_e;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_37
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_37
         // at: input_t.h:82:16
         always @(posedge clk)
          begin :drive_s_reg_37
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        // op:thread1/OP76
                        // at: input_t.h:82:16
                        // Call Stack: 
                        // in function copy called from input_t.h:43:9
                        // in function input_t called from cynw_p2p.h:1721:2
                        // in function use_data called from cynw_p2p.h:1558:8
                        // in function nb_get called from cynw_p2p.h:1481:7
                        // in function get called from dut.cc:41:23
                        s_reg_37 <= din_data_f;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_38
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_38
         // at: input_t.h:83:16
         always @(posedge clk)
          begin :drive_s_reg_38
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        // op:thread1/OP77
                        // at: input_t.h:83:16
                        // Call Stack: 
                        // in function copy called from input_t.h:43:9
                        // in function input_t called from cynw_p2p.h:1721:2
                        // in function use_data called from cynw_p2p.h:1558:8
                        // in function nb_get called from cynw_p2p.h:1481:7
                        // in function get called from dut.cc:41:23
                        s_reg_38 <= din_data_g;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_39
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_39
         // at: input_t.h:84:16
         always @(posedge clk)
          begin :drive_s_reg_39
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        // op:thread1/OP78
                        // at: input_t.h:84:16
                        // Call Stack: 
                        // in function copy called from input_t.h:43:9
                        // in function input_t called from cynw_p2p.h:1721:2
                        // in function use_data called from cynw_p2p.h:1558:8
                        // in function nb_get called from cynw_p2p.h:1481:7
                        // in function get called from dut.cc:41:23
                        s_reg_39 <= din_data_h;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_40
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_s_reg_40
         // at: input_t.h:78:16
         // at: dut.cc:54:26
         // at: dut.cc:54:27
         always @(posedge clk)
          begin :drive_s_reg_40
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd01:                      begin
                        // op:thread1/OP72
                        // at: input_t.h:78:16
                        // Call Stack: 
                        // in function copy called from input_t.h:43:9
                        // in function input_t called from cynw_p2p.h:1721:2
                        // in function use_data called from cynw_p2p.h:1558:8
                        // in function nb_get called from cynw_p2p.h:1481:7
                        // in function get called from dut.cc:41:23
                        s_reg_40 <= din_data_b;
                     end
                     
                     5'd09:                      begin
                        /* state13 */
                        // op:thread1/OP89
                        // at: dut.cc:54:26
                        // Call Stack: 
                        // in function thread1 called from dut.cc:54:26
                        s_reg_40 <= 8'd000;
                     end
                     
                     5'd13:                      begin
                        if (s_reg_46) begin
                           // op:thread1/OP89
                           // at: dut.cc:54:26
                           // Call Stack: 
                           // in function thread1 called from dut.cc:54:26
                           s_reg_40 <= {{ 3 {s_reg_40[4]}}, s_reg_40[4:0]};
                        end
                     end
                     
                     5'd15:                      begin
                        // op:thread1/OP108
                        // at: dut.cc:54:27
                        // Call Stack: 
                        // in function thread1 called from dut.cc:54:27
                        s_reg_40 <= {{ 3 {dut_Add_3Ux2S_5S_4_14_out1[4]}}, dut_Add_3Ux2S_5S_4_14_out1};
                     end
                     
                     5'd17:                      begin
                        // op:thread1/OP89
                        // at: dut.cc:54:26
                        // Call Stack: 
                        // in function thread1 called from dut.cc:54:26
                        s_reg_40 <= {{ 3 {s_reg_40[4]}}, s_reg_40[4:0]};
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_41
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_41
         // at: dut.cc:61:26
         // at: dut.cc:54:21
         always @(posedge clk)
          begin :drive_s_reg_41
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  // op:thread1/OP109
                  // at: dut.cc:54:21
                  // Call Stack: 
                  // in function thread1 called from dut.cc:54:21
                  s_reg_41 <= dut_LessThan_5Sx4S_1U_4_15_out1;
               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_42
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_s_reg_42
         // at: dut.cc:60:4
         // at: dut.cc:65:5
         // at: dut.cc:61:26
         always @(posedge clk)
          begin :drive_s_reg_42
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd09:                      begin
                        // op:thread1/OP90
                        // at: dut.cc:60:4
                        // Call Stack: 
                        // in function thread1 called from dut.cc:60:4
                        s_reg_42 <= 3'd0;
                     end
                     
                     5'd13:                      begin
                        // op:thread1/OP62
                        // at: dut.cc:61:26
                        // Call Stack: 
                        // in function thread1 called from dut.cc:61:26
                        s_reg_42 <= dut_N_Mux_3_2_0_4_13_out1;
                     end
                     
                     5'd17:                      begin
                        // op:thread1/OP95
                        // at: dut.cc:65:5
                        // Call Stack: 
                        // in function thread1 called from dut.cc:65:5
                        s_reg_42 <= s_reg_40[2:0];
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_43
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_43
         // at: dut.cc:61:31
         // at: dut.cc:77:34
         always @(posedge clk)
          begin :drive_s_reg_43
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd09, 5'd17:                      begin
                        // op:thread1/OP96
                        // at: dut.cc:61:31
                        // Call Stack: 
                        // in function thread1 called from dut.cc:61:31
                        s_reg_43 <= {{ 27 {dut_Add_3Ux2S_5S_4_8_out1[4]}}, dut_Add_3Ux2S_5S_4_8_out1};
                     end
                     
                     5'd13:                      begin
                        // op:thread1/OP96
                        // at: dut.cc:61:31
                        // Call Stack: 
                        // in function thread1 called from dut.cc:61:31
                        s_reg_43 <= s_reg_45;
                     end
                     
                     5'd19:                      begin
                        // op:thread1/OP112
                        // at: dut.cc:77:34
                        // Call Stack: 
                        // in function thread1 called from dut.cc:77:34
                        s_reg_43 <= arr_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_44
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_s_reg_44
         // at: dut.cc:65:21
         // at: dut.cc:70:16
         // at: dut.cc:76:34
         always @(posedge clk)
          begin :drive_s_reg_44
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd12, 5'd14, 5'd18:                      begin
                        // op:thread1/OP97
                        // at: dut.cc:65:21
                        // Call Stack: 
                        // in function thread1 called from dut.cc:65:21
                        s_reg_44 <= arr_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_45
         // Sharing or Control mux
         // Sharing/Controlling 2 operation(s) on drive_s_reg_45
         // at: dut.cc:61:32
         // at: dut.cc:78:34
         always @(posedge clk)
          begin :drive_s_reg_45
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd12:                      begin
                        // op:thread1/OP101
                        // at: dut.cc:61:32
                        // Call Stack: 
                        // in function thread1 called from dut.cc:61:32
                        s_reg_45 <= dut_Add_32Sx2S_32S_4_10_out1;
                     end
                     
                     5'd20:                      begin
                        // op:thread1/OP113
                        // at: dut.cc:78:34
                        // Call Stack: 
                        // in function thread1 called from dut.cc:78:34
                        s_reg_45 <= arr_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_46
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_46
         // at: dut.cc:61:26
         always @(posedge clk)
          begin :drive_s_reg_46
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  // op:thread1/OP102
                  // at: dut.cc:61:26
                  // Call Stack: 
                  // in function thread1 called from dut.cc:61:26
                  s_reg_46 <= dut_LessThan_33Sx33S_1U_4_11_out1;
               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_47
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_47
         // at: dut.cc:79:34
         always @(posedge clk)
          begin :drive_s_reg_47
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd21:                      begin
                        // op:thread1/OP114
                        // at: dut.cc:79:34
                        // Call Stack: 
                        // in function thread1 called from dut.cc:79:34
                        s_reg_47 <= arr_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_48
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_48
         // at: dut.cc:80:34
         always @(posedge clk)
          begin :drive_s_reg_48
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd22:                      begin
                        // op:thread1/OP115
                        // at: dut.cc:80:34
                        // Call Stack: 
                        // in function thread1 called from dut.cc:80:34
                        s_reg_48 <= arr_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_49
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_49
         // at: dut.cc:81:34
         always @(posedge clk)
          begin :drive_s_reg_49
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  case (global_state) 

                     5'd23:                      begin
                        // op:thread1/OP116
                        // at: dut.cc:81:34
                        // Call Stack: 
                        // in function thread1 called from dut.cc:81:34
                        s_reg_49 <= arr_out1;
                     end
                     
                  endcase

               end
               
            endcase

         end

         // rtl_process:dut/drive_s_reg_50
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_s_reg_50
         // at: dut.cc:82:34
         always @(posedge clk)
          begin :drive_s_reg_50
            case (stall0) 

               1'b1:                begin
               end
               
               1'b0:                begin
                  // op:thread1/OP117
                  // at: dut.cc:82:34
                  // Call Stack: 
                  // in function thread1 called from dut.cc:82:34
                  s_reg_50 <= arr_out1;
               end
               
            endcase

         end

         // rtl_process:dut/drive_arr_in1
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_arr_in1
         // at: dut.cc:83:34
         always @(s_reg_40[2:0] or s_reg_41 or s_reg_42 or s_reg_43[2:0] or s_reg_46 or dut_N_Mux_3_2_0_4_13_out1 or gs_ctrl0)
          begin :drive_arr_in1
            case (gs_ctrl0) 

               4'd01:                begin
                  // op:thread1/OP32
                  arr_in1 = 3'd1;
               end
               
               4'd02:                begin
                  // op:thread1/OP32
                  arr_in1 = 3'd2;
               end
               
               4'd03:                begin
                  // op:thread1/OP32
                  arr_in1 = 3'd3;
               end
               
               4'd04:                begin
                  // op:thread1/OP32
                  arr_in1 = 3'd4;
               end
               
               4'd05:                begin
                  // op:thread1/OP32
                  arr_in1 = 3'd5;
               end
               
               4'd06:                begin
                  // op:thread1/OP32
                  arr_in1 = 3'd6;
               end
               
               4'd07:                begin
                  // op:thread1/OP32
                  arr_in1 = 3'd7;
               end
               
               4'd08:                begin
                  // op:thread1/OP104
                  // at: dut.cc:70:16
                  // Call Stack: 
                  // in function thread1 called from dut.cc:70:16
                  arr_in1 = s_reg_40[2:0];
               end
               
               4'd09:                begin
                  // op:thread1/OP31
                  arr_in1 = s_reg_43[2:0];
               end
               
               4'd10:                begin
                  if (s_reg_46) begin
                     /* state29 */
                     // op:thread1/OP97
                     // at: dut.cc:65:21
                     // Call Stack: 
                     // in function thread1 called from dut.cc:65:21
                     arr_in1 = dut_N_Mux_3_2_0_4_13_out1;
                  end
                  else begin
                     // op:thread1/OP104
                     // at: dut.cc:70:16
                     // Call Stack: 
                     // in function thread1 called from dut.cc:70:16
                     arr_in1 = s_reg_40[2:0];
                  end
               end
               
               4'd11:                begin
                  // op:thread1/OP31
                  arr_in1 = s_reg_42;
               end
               
               4'd12:                begin
                  if (s_reg_41) begin
                     /* state27 */
                     // op:thread1/OP97
                     // at: dut.cc:65:21
                     // Call Stack: 
                     // in function thread1 called from dut.cc:65:21
                     arr_in1 = s_reg_40[2:0];
                  end
                  else begin
                     /* state28 */
                     // op:thread1/OP111
                     // at: dut.cc:76:34
                     // Call Stack: 
                     // in function thread1 called from dut.cc:76:34
                     arr_in1 = 3'd0;
                  end
               end
               
               default:                begin
                  // op:thread1/OP32
                  arr_in1 = 3'd0;
               end
               
            endcase

         end

         // rtl_process:dut/drive_arr_DIN
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_arr_DIN
         // at: dut.cc:72:19
         always @(din_data_a or s_reg_34 or s_reg_35 or s_reg_36 or s_reg_37 or s_reg_38 or s_reg_39 or s_reg_40 or s_reg_44 or arr_out1 or gs_ctrl1)
          begin :drive_arr_DIN
            case (gs_ctrl1) 

               4'd01:                begin
                  // op:thread1/OP32
                  arr_DIN = {24'b000000000000000000000000, s_reg_40};
               end
               
               4'd02:                begin
                  // op:thread1/OP32
                  arr_DIN = {24'b000000000000000000000000, s_reg_34};
               end
               
               4'd03:                begin
                  // op:thread1/OP32
                  arr_DIN = {24'b000000000000000000000000, s_reg_35};
               end
               
               4'd04:                begin
                  // op:thread1/OP32
                  arr_DIN = {24'b000000000000000000000000, s_reg_36};
               end
               
               4'd05:                begin
                  // op:thread1/OP32
                  arr_DIN = {24'b000000000000000000000000, s_reg_37};
               end
               
               4'd06:                begin
                  // op:thread1/OP32
                  arr_DIN = {24'b000000000000000000000000, s_reg_38};
               end
               
               4'd07:                begin
                  // op:thread1/OP32
                  arr_DIN = {24'b000000000000000000000000, s_reg_39};
               end
               
               4'd08:                begin
                  // op:thread1/OP32
                  arr_DIN = arr_out1;
               end
               
               4'd09:                begin
                  // op:thread1/OP32
                  arr_DIN = s_reg_44;
               end
               
               default:                begin
                  // op:thread1/OP32
                  arr_DIN = {24'b000000000000000000000000, din_data_a};
               end
               
            endcase

         end

         // rtl_process:dut/drive_arr_CE
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_arr_CE
         // at: dut.cc:65:21
         always @(stall0 or s_reg_41 or dut_LessThan_5Sx5S_1U_4_9_out1 or gs_ctrl2)
          begin :drive_arr_CE
            if (stall0) begin
               arr_CE = 1'b0;
            end
            else begin
               case (gs_ctrl2) 

                  2'd1:                   begin
                     // op:thread1/OP32
                     arr_CE = 1'b1;
                  end
                  
                  2'd2:                   begin
                     if (dut_LessThan_5Sx5S_1U_4_9_out1) begin
                        // op:thread1/OP97
                        // at: dut.cc:65:21
                        // Call Stack: 
                        // in function thread1 called from dut.cc:65:21
                        arr_CE = 1'b1;
                     end
                     else begin
                        arr_CE = 1'b0;
                     end
                  end
                  
                  2'd3:                   begin
                     if (s_reg_41) begin
                        if (dut_LessThan_5Sx5S_1U_4_9_out1) begin
                           // op:thread1/OP97
                           // at: dut.cc:65:21
                           // Call Stack: 
                           // in function thread1 called from dut.cc:65:21
                           arr_CE = 1'b1;
                        end
                        else begin
                           arr_CE = 1'b0;
                        end
                     end
                     else begin
                        // op:thread1/OP111
                        // at: dut.cc:76:34
                        // Call Stack: 
                        // in function thread1 called from dut.cc:76:34
                        arr_CE = 1'b1;
                     end
                  end
                  
                  default:                   begin
                     arr_CE = 1'b0;
                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_arr_RW
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_arr_RW
         // at: dut.cc:65:21
         always @(stall0 or gs_ctrl3)
          begin :drive_arr_RW
            if (stall0) begin
               arr_RW = 1'b0;
            end
            else begin
               if (gs_ctrl3) begin
                  // op:thread1/OP32
                  arr_RW = 1'b1;
               end
               else begin
                  arr_RW = 1'b0;
               end
            end
         end

         // rtl_process:dut/drive_dut_Add_3Ux2S_5S_4_8_in2
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dut_Add_3Ux2S_5S_4_8_in2
         // at: dut.cc:61:17
         always @(s_reg_40[2:0] or gs_ctrl4)
          begin :drive_dut_Add_3Ux2S_5S_4_8_in2
            if (gs_ctrl4) begin
               // op:thread1/OP17
               dut_Add_3Ux2S_5S_4_8_in2 = s_reg_40[2:0];
            end
            else begin
               // op:thread1/OP17
               dut_Add_3Ux2S_5S_4_8_in2 = 3'd0;
            end
         end

         // rtl_instance:dut/dut_Add_3Ux2S_5S_4_8
         // Resource=dut_Add_3Ux2S_5S_4, Function=add : Inputs=3,2S Outputs=5S
         // Implements 1 operation(s)
         // at: dut.cc:61:19
         assign dut_Add_3Ux2S_5S_4_8_out1 = {2'b00, dut_Add_3Ux2S_5S_4_8_in2} + 5'd01;

         // rtl_instance:dut/dut_LessThan_5Sx5S_1U_4_9
         // Resource=dut_LessThan_5Sx5S_1U_4, Function=lt : Inputs=5S,5S Outputs=1
         // Implements 1 operation(s)
         // at: dut.cc:61:26
         assign dut_LessThan_5Sx5S_1U_4_9_out1 = dut_Add_3Ux2S_5S_4_8_out1[4] ^ dut_Add_3Ux2S_5S_4_8_out1 < 5'd08;

         // rtl_instance:dut/dut_Add_32Sx2S_32S_4_10
         // Resource=dut_Add_32Sx2S_32S_4, Function=add : Inputs=32S,2S Outputs=32S
         // Implements 1 operation(s)
         // at: dut.cc:61:32
         assign dut_Add_32Sx2S_32S_4_10_out1 = s_reg_43 + 32'd0000000001;

         // rtl_instance:dut/dut_LessThan_33Sx33S_1U_4_11
         // Resource=dut_LessThan_33Sx33S_1U_4, Function=lt : Inputs=33S,33S Outputs=1
         // Implements 1 operation(s)
         // at: dut.cc:61:26
         assign dut_LessThan_33Sx33S_1U_4_11_out1 = dut_Add_32Sx2S_32S_4_10_out1[31] ^ {dut_Add_32Sx2S_32S_4_10_out1[31], dut_Add_32Sx2S_32S_4_10_out1} < 33'd0000000008;

         // rtl_instance:dut/dut_LessThan_32Ux32U_1U_4_12
         // Resource=dut_LessThan_32Ux32U_1U_4, Function=lt : Inputs=32,32 Outputs=1
         // Implements 1 operation(s)
         // at: dut.cc:65:16
         assign dut_LessThan_32Ux32U_1U_4_12_out1 = arr_out1 < s_reg_44;

         // rtl_instance:dut/dut_N_Mux_3_2_0_4
         always @(s_reg_42 or s_reg_43[2:0] or dut_LessThan_32Ux32U_1U_4_12_out1)
          begin :dut_N_Mux_3_2_0_4_13
            if (dut_LessThan_32Ux32U_1U_4_12_out1) begin
               dut_N_Mux_3_2_0_4_13_out1 = s_reg_43[2:0];
            end
            else begin
               dut_N_Mux_3_2_0_4_13_out1 = s_reg_42;
            end
         end

         // rtl_instance:dut/dut_Add_3Ux2S_5S_4_14
         // Resource=dut_Add_3Ux2S_5S_4, Function=add : Inputs=3,2S Outputs=5S
         // Implements 1 operation(s)
         // at: dut.cc:54:27
         assign dut_Add_3Ux2S_5S_4_14_out1 = {2'b00, s_reg_40[2:0]} + 5'd01;

         // rtl_instance:dut/dut_LessThan_5Sx4S_1U_4_15
         // Resource=dut_LessThan_5Sx4S_1U_4, Function=lt : Inputs=5S,4S Outputs=1
         // Implements 1 operation(s)
         // at: dut.cc:54:21
         assign dut_LessThan_5Sx4S_1U_4_15_out1 = s_reg_40[4] ^ s_reg_40[4:0] < 5'd07;

         // rtl_process:dut/drive_global_state
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB11 : SCHED_1
         //    FSM: global_state == 2
         // BB12 : SCHED_2
         //    FSM: global_state == 3
         // BB13 : SCHED_3
         //    FSM: global_state == 4
         // BB14 : SCHED_4
         //    FSM: global_state == 5
         // BB15 : SCHED_5
         //    FSM: global_state == 6
         // BB16 : SCHED_6
         //    FSM: global_state == 7
         // BB17 : SCHED_7
         //    FSM: global_state == 8
         // BB18 : SCHED_8
         //    FSM: global_state == 9
         // BB24 : SCHED_12
         //    FSM: global_state == 10
         // BB25 : SCHED_17
         //    FSM: global_state == 12
         // BB26 : SCHED_13
         //    FSM: global_state == 11
         // BB27 : SCHED_18
         //    FSM: global_state == 13
         // BB31 : SCHED_21
         //    FSM: global_state == 14
         // BB32 : SCHED_22
         //    FSM: global_state == 15
         // BB33 : SCHED_23
         //    FSM: global_state == 16
         // BB34 : SCHED_24
         //    FSM: global_state == 17
         // BB37 : SCHED_27
         //    FSM: global_state == 18
         // BB38 : SCHED_28
         //    FSM: global_state == 19
         // BB39 : SCHED_29
         //    FSM: global_state == 20
         // BB40 : SCHED_30
         //    FSM: global_state == 21
         // BB41 : SCHED_31
         //    FSM: global_state == 22
         // BB42 : SCHED_32
         //    FSM: global_state == 23
         // BB43 : SCHED_33
         //    FSM: global_state == 24
         // BB44 : SCHED_34
         //    FSM: global_state == 25
         // BB47 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 26
         always @(posedge clk)
          begin :drive_global_state
            if (rst == 1'b0) begin
               // basic_block:gen_do_stall_reg_full/BB8
               global_state <= 5'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     global_state <= global_state_next;
                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_global_state_next
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB11 : SCHED_1
         //    FSM: global_state == 2
         // BB12 : SCHED_2
         //    FSM: global_state == 3
         // BB13 : SCHED_3
         //    FSM: global_state == 4
         // BB14 : SCHED_4
         //    FSM: global_state == 5
         // BB15 : SCHED_5
         //    FSM: global_state == 6
         // BB16 : SCHED_6
         //    FSM: global_state == 7
         // BB17 : SCHED_7
         //    FSM: global_state == 8
         // BB18 : SCHED_8
         //    FSM: global_state == 9
         // BB24 : SCHED_12
         //    FSM: global_state == 10
         // BB25 : SCHED_17
         //    FSM: global_state == 12
         // BB26 : SCHED_13
         //    FSM: global_state == 11
         // BB27 : SCHED_18
         //    FSM: global_state == 13
         // BB31 : SCHED_21
         //    FSM: global_state == 14
         // BB32 : SCHED_22
         //    FSM: global_state == 15
         // BB33 : SCHED_23
         //    FSM: global_state == 16
         // BB34 : SCHED_24
         //    FSM: global_state == 17
         // BB37 : SCHED_27
         //    FSM: global_state == 18
         // BB38 : SCHED_28
         //    FSM: global_state == 19
         // BB39 : SCHED_29
         //    FSM: global_state == 20
         // BB40 : SCHED_30
         //    FSM: global_state == 21
         // BB41 : SCHED_31
         //    FSM: global_state == 22
         // BB42 : SCHED_32
         //    FSM: global_state == 23
         // BB43 : SCHED_33
         //    FSM: global_state == 24
         // BB44 : SCHED_34
         //    FSM: global_state == 25
         // BB47 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 26
         always @(s_reg_41 or s_reg_46 or dut_LessThan_5Sx5S_1U_4_9_out1 or global_state)
          begin :drive_global_state_next
            case (global_state) 

               5'd00, 5'd26:                begin
                  // basic_block:thread1/BB7
                  global_state_next = 5'd01;
               end
               
               5'd09:                begin
                  if (dut_LessThan_5Sx5S_1U_4_9_out1) begin
                     // basic_block:thread1/BB25
                     global_state_next = 5'd12;
                  end
                  else begin
                     global_state_next = global_state + 5'd01;
                  end
               end
               
               5'd11:                begin
                  // basic_block:thread1/BB31
                  global_state_next = 5'd14;
               end
               
               5'd13:                begin
                  if (s_reg_46) begin
                     // basic_block:thread1/BB25
                     global_state_next = 5'd12;
                  end
                  else begin
                     global_state_next = global_state + 5'd01;
                  end
               end
               
               5'd17:                begin
                  if (s_reg_41) begin
                     if (dut_LessThan_5Sx5S_1U_4_9_out1) begin
                        // basic_block:thread1/BB25
                        global_state_next = 5'd12;
                     end
                     else begin
                        // basic_block:thread1/BB24
                        global_state_next = 5'd10;
                     end
                  end
                  else begin
                     global_state_next = global_state + 5'd01;
                  end
               end
               
               default:                begin
                  global_state_next = global_state + 5'd01;
               end
               
            endcase

         end

         // rtl_process:dut/drive_gs_ctrl0
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB11 : SCHED_1
         //    FSM: global_state == 2
         // BB12 : SCHED_2
         //    FSM: global_state == 3
         // BB13 : SCHED_3
         //    FSM: global_state == 4
         // BB14 : SCHED_4
         //    FSM: global_state == 5
         // BB15 : SCHED_5
         //    FSM: global_state == 6
         // BB16 : SCHED_6
         //    FSM: global_state == 7
         // BB17 : SCHED_7
         //    FSM: global_state == 8
         // BB18 : SCHED_8
         //    FSM: global_state == 9
         // BB24 : SCHED_12
         //    FSM: global_state == 10
         // BB25 : SCHED_17
         //    FSM: global_state == 12
         // BB26 : SCHED_13
         //    FSM: global_state == 11
         // BB27 : SCHED_18
         //    FSM: global_state == 13
         // BB31 : SCHED_21
         //    FSM: global_state == 14
         // BB32 : SCHED_22
         //    FSM: global_state == 15
         // BB33 : SCHED_23
         //    FSM: global_state == 16
         // BB34 : SCHED_24
         //    FSM: global_state == 17
         // BB37 : SCHED_27
         //    FSM: global_state == 18
         // BB38 : SCHED_28
         //    FSM: global_state == 19
         // BB39 : SCHED_29
         //    FSM: global_state == 20
         // BB40 : SCHED_30
         //    FSM: global_state == 21
         // BB41 : SCHED_31
         //    FSM: global_state == 22
         // BB42 : SCHED_32
         //    FSM: global_state == 23
         // BB43 : SCHED_33
         //    FSM: global_state == 24
         // BB44 : SCHED_34
         //    FSM: global_state == 25
         // BB47 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 26
         always @(posedge clk)
          begin :drive_gs_ctrl0
            if (rst == 1'b0) begin
               gs_ctrl0 <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd02, 5'd18:                         begin
                           gs_ctrl0 <= 4'd01;
                        end
                        
                        5'd03, 5'd19:                         begin
                           gs_ctrl0 <= 4'd02;
                        end
                        
                        5'd04, 5'd20:                         begin
                           gs_ctrl0 <= 4'd03;
                        end
                        
                        5'd05, 5'd21:                         begin
                           gs_ctrl0 <= 4'd04;
                        end
                        
                        5'd06, 5'd22:                         begin
                           gs_ctrl0 <= 4'd05;
                        end
                        
                        5'd07, 5'd23:                         begin
                           gs_ctrl0 <= 4'd06;
                        end
                        
                        5'd08, 5'd24:                         begin
                           gs_ctrl0 <= 4'd07;
                        end
                        
                        5'd11, 5'd15:                         begin
                           gs_ctrl0 <= 4'd08;
                        end
                        
                        5'd12:                         begin
                           gs_ctrl0 <= 4'd09;
                        end
                        
                        5'd13:                         begin
                           gs_ctrl0 <= 4'd10;
                        end
                        
                        5'd14, 5'd16:                         begin
                           gs_ctrl0 <= 4'd11;
                        end
                        
                        5'd17:                         begin
                           gs_ctrl0 <= 4'd12;
                        end
                        
                        default:                         begin
                           gs_ctrl0 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_gs_ctrl1
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB11 : SCHED_1
         //    FSM: global_state == 2
         // BB12 : SCHED_2
         //    FSM: global_state == 3
         // BB13 : SCHED_3
         //    FSM: global_state == 4
         // BB14 : SCHED_4
         //    FSM: global_state == 5
         // BB15 : SCHED_5
         //    FSM: global_state == 6
         // BB16 : SCHED_6
         //    FSM: global_state == 7
         // BB17 : SCHED_7
         //    FSM: global_state == 8
         // BB18 : SCHED_8
         //    FSM: global_state == 9
         // BB24 : SCHED_12
         //    FSM: global_state == 10
         // BB25 : SCHED_17
         //    FSM: global_state == 12
         // BB26 : SCHED_13
         //    FSM: global_state == 11
         // BB27 : SCHED_18
         //    FSM: global_state == 13
         // BB31 : SCHED_21
         //    FSM: global_state == 14
         // BB32 : SCHED_22
         //    FSM: global_state == 15
         // BB33 : SCHED_23
         //    FSM: global_state == 16
         // BB34 : SCHED_24
         //    FSM: global_state == 17
         // BB37 : SCHED_27
         //    FSM: global_state == 18
         // BB38 : SCHED_28
         //    FSM: global_state == 19
         // BB39 : SCHED_29
         //    FSM: global_state == 20
         // BB40 : SCHED_30
         //    FSM: global_state == 21
         // BB41 : SCHED_31
         //    FSM: global_state == 22
         // BB42 : SCHED_32
         //    FSM: global_state == 23
         // BB43 : SCHED_33
         //    FSM: global_state == 24
         // BB44 : SCHED_34
         //    FSM: global_state == 25
         // BB47 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 26
         always @(posedge clk)
          begin :drive_gs_ctrl1
            if (rst == 1'b0) begin
               gs_ctrl1 <= 4'd00;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd02:                         begin
                           gs_ctrl1 <= 4'd01;
                        end
                        
                        5'd03:                         begin
                           gs_ctrl1 <= 4'd02;
                        end
                        
                        5'd04:                         begin
                           gs_ctrl1 <= 4'd03;
                        end
                        
                        5'd05:                         begin
                           gs_ctrl1 <= 4'd04;
                        end
                        
                        5'd06:                         begin
                           gs_ctrl1 <= 4'd05;
                        end
                        
                        5'd07:                         begin
                           gs_ctrl1 <= 4'd06;
                        end
                        
                        5'd08:                         begin
                           gs_ctrl1 <= 4'd07;
                        end
                        
                        5'd15:                         begin
                           gs_ctrl1 <= 4'd08;
                        end
                        
                        5'd16:                         begin
                           gs_ctrl1 <= 4'd09;
                        end
                        
                        default:                         begin
                           gs_ctrl1 <= 4'd00;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_gs_ctrl2
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB11 : SCHED_1
         //    FSM: global_state == 2
         // BB12 : SCHED_2
         //    FSM: global_state == 3
         // BB13 : SCHED_3
         //    FSM: global_state == 4
         // BB14 : SCHED_4
         //    FSM: global_state == 5
         // BB15 : SCHED_5
         //    FSM: global_state == 6
         // BB16 : SCHED_6
         //    FSM: global_state == 7
         // BB17 : SCHED_7
         //    FSM: global_state == 8
         // BB18 : SCHED_8
         //    FSM: global_state == 9
         // BB24 : SCHED_12
         //    FSM: global_state == 10
         // BB25 : SCHED_17
         //    FSM: global_state == 12
         // BB26 : SCHED_13
         //    FSM: global_state == 11
         // BB27 : SCHED_18
         //    FSM: global_state == 13
         // BB31 : SCHED_21
         //    FSM: global_state == 14
         // BB32 : SCHED_22
         //    FSM: global_state == 15
         // BB33 : SCHED_23
         //    FSM: global_state == 16
         // BB34 : SCHED_24
         //    FSM: global_state == 17
         // BB37 : SCHED_27
         //    FSM: global_state == 18
         // BB38 : SCHED_28
         //    FSM: global_state == 19
         // BB39 : SCHED_29
         //    FSM: global_state == 20
         // BB40 : SCHED_30
         //    FSM: global_state == 21
         // BB41 : SCHED_31
         //    FSM: global_state == 22
         // BB42 : SCHED_32
         //    FSM: global_state == 23
         // BB43 : SCHED_33
         //    FSM: global_state == 24
         // BB44 : SCHED_34
         //    FSM: global_state == 25
         // BB47 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 26
         always @(posedge clk)
          begin :drive_gs_ctrl2
            if (rst == 1'b0) begin
               gs_ctrl2 <= 2'd0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01, 5'd02, 5'd03, 5'd04, 5'd05, 5'd06, 5'd07, 5'd08, 5'd11, 5'd12, 5'd13, 5'd14, 5'd15, 5'd16, 5'd18, 5'd19, 5'd20, 5'd21, 5'd22, 5'd23, 5'd24:                         begin
                           gs_ctrl2 <= 2'd1;
                        end
                        
                        5'd09:                         begin
                           gs_ctrl2 <= 2'd2;
                        end
                        
                        5'd17:                         begin
                           gs_ctrl2 <= 2'd3;
                        end
                        
                        default:                         begin
                           gs_ctrl2 <= 2'd0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_gs_ctrl3
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB11 : SCHED_1
         //    FSM: global_state == 2
         // BB12 : SCHED_2
         //    FSM: global_state == 3
         // BB13 : SCHED_3
         //    FSM: global_state == 4
         // BB14 : SCHED_4
         //    FSM: global_state == 5
         // BB15 : SCHED_5
         //    FSM: global_state == 6
         // BB16 : SCHED_6
         //    FSM: global_state == 7
         // BB17 : SCHED_7
         //    FSM: global_state == 8
         // BB18 : SCHED_8
         //    FSM: global_state == 9
         // BB24 : SCHED_12
         //    FSM: global_state == 10
         // BB25 : SCHED_17
         //    FSM: global_state == 12
         // BB26 : SCHED_13
         //    FSM: global_state == 11
         // BB27 : SCHED_18
         //    FSM: global_state == 13
         // BB31 : SCHED_21
         //    FSM: global_state == 14
         // BB32 : SCHED_22
         //    FSM: global_state == 15
         // BB33 : SCHED_23
         //    FSM: global_state == 16
         // BB34 : SCHED_24
         //    FSM: global_state == 17
         // BB37 : SCHED_27
         //    FSM: global_state == 18
         // BB38 : SCHED_28
         //    FSM: global_state == 19
         // BB39 : SCHED_29
         //    FSM: global_state == 20
         // BB40 : SCHED_30
         //    FSM: global_state == 21
         // BB41 : SCHED_31
         //    FSM: global_state == 22
         // BB42 : SCHED_32
         //    FSM: global_state == 23
         // BB43 : SCHED_33
         //    FSM: global_state == 24
         // BB44 : SCHED_34
         //    FSM: global_state == 25
         // BB47 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 26
         always @(posedge clk)
          begin :drive_gs_ctrl3
            if (rst == 1'b0) begin
               gs_ctrl3 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd01, 5'd02, 5'd03, 5'd04, 5'd05, 5'd06, 5'd07, 5'd08, 5'd15, 5'd16:                         begin
                           gs_ctrl3 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl3 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_gs_ctrl4
         // FSM Control Mux
         // FSM Control for thread behavior:thread1
         // BB3 : PROTO_1
         //   SRCLOC: dut.cc:35:3
         // Controls the following states
         //    FSM: global_state == 0
         // BB7 : PROTO_2
         //   SRCLOC: cynw_p2p.h:1466:11
         //    FSM: global_state == 1
         // BB11 : SCHED_1
         //    FSM: global_state == 2
         // BB12 : SCHED_2
         //    FSM: global_state == 3
         // BB13 : SCHED_3
         //    FSM: global_state == 4
         // BB14 : SCHED_4
         //    FSM: global_state == 5
         // BB15 : SCHED_5
         //    FSM: global_state == 6
         // BB16 : SCHED_6
         //    FSM: global_state == 7
         // BB17 : SCHED_7
         //    FSM: global_state == 8
         // BB18 : SCHED_8
         //    FSM: global_state == 9
         // BB24 : SCHED_12
         //    FSM: global_state == 10
         // BB25 : SCHED_17
         //    FSM: global_state == 12
         // BB26 : SCHED_13
         //    FSM: global_state == 11
         // BB27 : SCHED_18
         //    FSM: global_state == 13
         // BB31 : SCHED_21
         //    FSM: global_state == 14
         // BB32 : SCHED_22
         //    FSM: global_state == 15
         // BB33 : SCHED_23
         //    FSM: global_state == 16
         // BB34 : SCHED_24
         //    FSM: global_state == 17
         // BB37 : SCHED_27
         //    FSM: global_state == 18
         // BB38 : SCHED_28
         //    FSM: global_state == 19
         // BB39 : SCHED_29
         //    FSM: global_state == 20
         // BB40 : SCHED_30
         //    FSM: global_state == 21
         // BB41 : SCHED_31
         //    FSM: global_state == 22
         // BB42 : SCHED_32
         //    FSM: global_state == 23
         // BB43 : SCHED_33
         //    FSM: global_state == 24
         // BB44 : SCHED_34
         //    FSM: global_state == 25
         // BB47 : PROTO_3
         //   SRCLOC: cynw_p2p.h:5073:4
         //    FSM: global_state == 26
         always @(posedge clk)
          begin :drive_gs_ctrl4
            if (rst == 1'b0) begin
               gs_ctrl4 <= 1'b0;
            end
            else begin
               case (stall0) 

                  1'b1:                   begin
                  end
                  
                  1'b0:                   begin
                     case (global_state_next) 

                        5'd17:                         begin
                           gs_ctrl4 <= 1'b1;
                        end
                        
                        default:                         begin
                           gs_ctrl4 <= 1'b0;
                        end
                        
                     endcase

                  end
                  
               endcase

            end
         end

         // rtl_process:dut/drive_din_busy
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_din_busy
         // at: cynw_p2p.h:1771:13
         assign din_busy = dut_gen_busy_r_1_2_out1[2];

         // rtl_instance:dut/dut_gen_busy_r_1_2
         // Resource=dut_gen_busy_r_1, Function=not not and and or : Inputs=1,1,1 Outputs=3
         // Implements 1 operation(s)
         // at: cynw_p2p.h:1739:8
         assign dut_gen_busy_r_1_2_out1 = {dut_gen_busy_r_1_2_gnew_req, {dut_gen_busy_r_1_2_gdiv, dut_gen_busy_r_1_2_gen_busy_din_m_data_is_invalid_next}};

         // rtl_instance:dut/dut_gen_busy_r_1_2
         // This resource is split across multiple concurrent processes.
         // See line:1216
         assign dut_gen_busy_r_1_2_gen_busy_din_m_data_is_invalid_next = ~dut_gen_busy_r_1_2_gdiv;

         // rtl_instance:dut/dut_gen_busy_r_1_2
         // This resource is split across multiple concurrent processes.
         // See line:1216
         assign dut_gen_busy_r_1_2_gdiv = din_vld & !dut_gen_busy_r_1_2_gnew_req;

         // rtl_instance:dut/dut_gen_busy_r_1_2
         // This resource is split across multiple concurrent processes.
         // See line:1216
         assign dut_gen_busy_r_1_2_gnew_req = din_m_busy_req_0 & (din_m_unvalidated_req | din_vld);

         // rtl_process:dut/drive_din_m_unvalidated_req
         // Sharing or Control mux
         // Sharing/Controlling 4 operation(s) on drive_din_m_unvalidated_req
         // at: cynw_p2p.h:1802:2
         // at: cynw_p2p.h:1796:10
         // at: cynw_p2p.h:1807:13
         // at: cynw_p2p.h:1761:36
         always @(posedge clk)
          begin :drive_din_m_unvalidated_req
            if (rst == 1'b0) begin
               // op:gen_unvalidated_req/OP0
               // at: cynw_p2p.h:1802:2
               // Call Stack: 
               // in function gen_unvalidated_req called from cynw_p2p.h:1802:2
               din_m_unvalidated_req <= 1'd1;
            end
            else begin
               // op:gen_unvalidated_req/OP6
               // at: cynw_p2p.h:1807:13
               // Call Stack: 
               // in function gen_unvalidated_req called from cynw_p2p.h:1807:13
               din_m_unvalidated_req <= dut_N_Muxb_1_2_1_4_1_out1;
            end
         end

         // rtl_instance:dut/dut_N_Muxb_1_2_1_4
         // This resource is split across multiple concurrent processes.
         // See line:1216
         always @(din_vld or din_m_busy_req_0 or din_m_unvalidated_req)
          begin :dut_N_Muxb_1_2_1_4_1
            if (din_m_busy_req_0) begin
               dut_N_Muxb_1_2_1_4_1_out1 = din_m_unvalidated_req;
            end
            else begin
               dut_N_Muxb_1_2_1_4_1_out1 = din_vld;
            end
         end

         // rtl_process:dut/drive_dout_vld
         // Sharing or Control mux
         // Sharing/Controlling 1 operation(s) on drive_dout_vld
         // at: cynw_p2p.h:5144:18
         assign dout_vld = dut_Or_1Ux1U_1U_4_5_out1;

         // rtl_instance:dut/dut_Or_1Ux1U_1U_4_5
         // Resource=dut_Or_1Ux1U_1U_4, Function=or : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: cynw_p2p.h:5144:50
         assign dut_Or_1Ux1U_1U_4_5_out1 = dout_m_unacked_req | dut_Xor_1Ux1U_1U_1_4_out1;

         // rtl_process:dut/drive_dout_m_unacked_req
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dout_m_unacked_req
         // at: cynw_p2p.h:5144:29
         // at: cynw_p2p.h:5156:9
         // at: cynw_p2p.h:5159:9
         always @(posedge clk)
          begin :drive_dout_m_unacked_req
            if (rst == 1'b0) begin
               // op:gen_unacked_req/OP55
               // at: cynw_p2p.h:5156:9
               // Call Stack: 
               // in function gen_unacked_req called from cynw_p2p.h:5156:9
               dout_m_unacked_req <= 1'd0;
            end
            else begin
               // op:gen_unacked_req/OP57
               // at: cynw_p2p.h:5159:9
               // Call Stack: 
               // in function gen_unacked_req called from cynw_p2p.h:5159:9
               dout_m_unacked_req <= dut_And_1Ux1U_1U_1_6_out1;
            end
         end

         // rtl_instance:dut/dut_And_1Ux1U_1U_1_6
         // Resource=dut_And_1Ux1U_1U_1, Function=and : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: cynw_p2p.h:5171:43
         assign dut_And_1Ux1U_1U_1_6_out1 = dout_busy & dout_vld;

         // rtl_instance:dut/dut_Xor_1Ux1U_1U_1_4
         // Resource=dut_Xor_1Ux1U_1U_1, Function=xor : Inputs=1,1 Outputs=1
         // Implements 1 operation(s)
         // at: cynw_comm_util.h:1331:70
         assign dut_Xor_1Ux1U_1U_1_4_out1 = dout_m_req_m_trig_req ^ dout_m_req_m_prev_trig_req;

         // rtl_process:dut/drive_dout_m_req_m_prev_trig_req
         // Sharing or Control mux
         // Sharing/Controlling 3 operation(s) on drive_dout_m_req_m_prev_trig_req
         // at: cynw_comm_util.h:1343:9
         // at: cynw_comm_util.h:1345:9
         // at: cynw_comm_util.h:1331:73
         always @(posedge clk)
          begin :drive_dout_m_req_m_prev_trig_req
            if (rst == 1'b0) begin
               // op:gen_prev_trig_reg/OP10
               // at: cynw_comm_util.h:1343:9
               // Call Stack: 
               // in function gen_prev_trig_reg called from cynw_comm_util.h:1343:9
               dout_m_req_m_prev_trig_req <= 1'd0;
            end
            else begin
               // op:gen_prev_trig_reg/OP12
               // at: cynw_comm_util.h:1345:9
               // Call Stack: 
               // in function gen_prev_trig_reg called from cynw_comm_util.h:1345:9
               dout_m_req_m_prev_trig_req <= dout_m_req_m_trig_req;
            end
         end

         // rtl_instance:dut/dut_Not_1U_1U_1_7
         // Resource=dut_Not_1U_1U_1, Function=not : Inputs=1 Outputs=1
         // Implements 1 operation(s)
         // at: cynw_comm_util.h:1367:25
         assign dut_Not_1U_1U_1_7_out1 = !dout_m_req_m_trig_req;


endmodule


