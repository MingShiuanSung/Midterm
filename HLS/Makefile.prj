
##############################################################################
# Makefile generated by bdw_makegen version 19.12-s100
#      Cadence Design Systems
#      Mon Apr 18 10:51:18 CST 2022
#          Project file was <project.tcl>
##############################################################################

######################################################################
## Exported variables.  
## Each of these variables will be accessible to all child processes.
######################################################################

export BDW_TECH_LIBS	=	/usr/cadtool/cadence/STRATUS/cur/share/stratus/techlibs/GPDK045/gsclib045_svt_v4.4/gsclib045/timing/slow_vdd1v2_basicCells.lib
export BDW_WORKLIB
ifeq ($(BDW_WORKLIB),)
	BDW_WORKLIB = bdw_work
endif

ifeq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
export STRATUS_HOME := $(shell echo "puts [get_install_path]" | bdw_shell)
else
export STRATUS_HOME := /usr/cadtool/cadence/STRATUS/cur
endif
export STRATUS_PLATFORM := lnx86

export BDW_TCL_DIR = $(STRATUS_HOME)/share/stratus/tcl


export BDW_SYSTEMC_VERSION = 2.3.1


# Use internal SystemC 2.3.1 for simulation
export SYSTEMC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/systemc/2.3.1


# Use builtin gcc 4.8 for simulations.
export BDW_CC := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/4.8/bin/g++
export BDW_AR := $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/gcc/4.8/bin/ar rc
export BDW_CCDEP := $(BDW_CC)
export BDW_LINK := $(BDW_CC)


export BDW_USE_ESCLIB = 1
export BDW_VERILOG_DIALECT = 1995
export BDW_OBJDIR		=	$(BDW_WORKLIB)/objs
export BDW_SIMDIR		=	$(BDW_WORKLIB)/sims
export BDW_MODULEDIR	=	$(BDW_WORKLIB)/modules
export BDW_LIBDIR		=	$(BDW_WORKLIB)/libs
export BDW_WRAPDIR		=	$(BDW_WORKLIB)/wrappers
export BDW_HLSLIB_DIRS
export BDW_HLSLIB_NAMES
export BDW_PROJECT_FILE =   project.tcl
export BDW_SIM_CONFIG
export BDW_SIM_CONFIG_DIR
export BDW_LS_CONFIG
export BDW_LS_CONFIG_DIR
export BDW_LS_CONFIG_LOGS
export BDW_VRTL_FILE
export BDW_MODULE
export BDW_HLS_CONFIG
export BDW_HLS_CONFIG_DIR
export BDW_CYNTH_CONFIG
export BDW_CYNTH_CONFIG_DIR
export BDW_LS_INFO

export BDW_COWARE = 0
export BDW_COWARE_LOAD_FLAGS
export BDW_COWARE_PREPROC_FLAGS
export BDW_VISTA = 0
export BDW_NCSC = 0
export BDW_XMSC = 0
export BDW_VLOGSIM_ARGS
export BDW_VLOGCOMP_ARGS
export BDW_VLOG_LIBS
export BDW_VLOG_DEFINES
export BDW_VLOG_DUT_FILES
export BDW_EXTRA_LDFLAGS
export BDW_EXTRA_LIBS
export BDW_EXTRA_LIB_FLAGS
export BDW_COV_LIB_FLAGS
export BDW_EXTRA_CCFLAGS
export BDW_CCOPTIONS
export BDW_SCSIM_ARGS
export BDW_HUB_ARGV
export BDW_USE_SCV
export BDW_FSDBVCSPLATFORM
BDW_FSDBVCSPLATFORM = LINUX64
export BDW_USE_SCV = 0
ifeq ($(CM_USERLOGDIR),)
	export CM_USERLOGDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif
ifeq ($(CM_USERTMPDIR),)
	export CM_USERTMPDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif

# Provide backwards compatibility with CONF variable used in some applications
# to set the configuration on the command line.
ifneq ($(CONF),)
	BDW_SIM_CONFIG = $(CONF)
endif

######################################################################
## Definitions for remote execution
######################################################################
export BDW_EXEC_CMD
export BDW_PMAKE_FLG
ifeq ($(BDW_EXEC_CMD),)
    BDW_EXEC_CMD=
endif

######################################################################
## Definitions for compilation and synthesis
######################################################################

MAKE			   = make --no-print-directory -f $(firstword $(MAKEFILE_LIST))
PERL			   = perl
CYNTHHL			   = ${STRATUS_HOME}/bin/stratus_hls
CYNTHVLG		   = ${STRATUS_HOME}/bin/stratus_vlg --project project.tcl
ifneq ($(BDW_TMPLNK_DIR),)
BDW_TMPLNK_FILE    := $(shell $(STRATUS_HOME)/bin/bdw_tmpfile $(BDW_TMPLNK_DIR)/BDWLNK.$(USER).XXXXXX)
endif

######################################################################
## Set variables for and include BDW common Makefile bdw.mak
######################################################################

export BDW_USEHUB	   = $(BDW_USE_ESCLIB)
export BDW_USECYNTH	   = 1
export BDW_WRITEFSDB   = 0
ifeq ($(BDW_WRITEFSDB),1)
	export BDW_NOVAS_INST_DIR = $(shell $(STRATUS_HOME)/bin/bdw_find_novas_install)
	ifeq ($(wildcard $(BDW_NOVAS_INST_DIR)/share/PLI/VCS*),$(BDW_NOVAS_INST_DIR)/share/PLI/VCS)
		# The PLI/VCS dir is an indication that this is a 2010 or later Novas release, and we can use automatic VCS platform selection.
		BDW_FSDB_VCS_ARGS = -debug_pp -LDFLAGS -Wl,-rpath,$(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM) -P $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/pli.a
	else
		# For older versions of Novas, use vcs_latest, which works with all supported VCS versions.
		BDW_FSDB_VCS_ARGS = -P $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/pli.a
	endif
else
	BDW_FSDB_VCS_ARGS =
endif
BDW_INCLUDE_DIRS = 
BDW_CCFLAGS        = -I./ -I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(addprefix -I,$(BDW_INCLUDE_DIRS))
ifneq ($(BDW_SIM_CONFIG),)
    BDW_SOURCES		   += main.cc tb.cc
endif
BDW_CCOPTIONS	   = -g -DCLOCK_PERIOD=10.0 
BDW_COV_LIB_FLAGS = 
BDW_DEP_FILTER	   = | bdw_depfilter project.tcl

VPATH += $(BDW_INCLUDE_DIRS)

vpath %.bdt $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/lib

BDW_LOGOPTIONS_FILE = $(BDW_WRAPDIR)/.logOptions

# rule to create .logOptions if it gets accidentally removed
$(BDW_LOGOPTIONS_FILE): project.tcl
	@bdw_makegen project.tcl -q 

######################################################################
## Start of Configurations
######################################################################
BDW_SHAREDLIB		=	0
BDW_VLOG_DUT_FILES	=	
VLOG_COSIM_TOP	=
BDW_ALL_WRAPPERS    =


HL_FLAGS           = --logfile=stratus_hls.log -I. -I$(BDW_WRAPDIR) -I$(STRATUS_HOME)/share/stratus/include  $(BDW_EXTRA_HLFLAGS) $(addprefix --tl=,$(BDW_TECH_LIBS)) --balance_expr=off --clock_period=10.000 --default_input_delay=0.100 --dpopt_auto=off --dpopt_with_enable=off --flatten_arrays=none --inline_partial_constants=off --lsb_trimming=off --message_detail=0 --method_processing=synthesize --path_delay_limit=140.000 --rtl_annotation=op,stack --sched_asap=off --unroll_loops=off --wireload=none
VLG_FLAGS          = -DBDW_RTL=1 -I$(BDW_WRAPDIR)  $(BDW_EXTRA_VLGFLAGS)

HL_FLAGS_dut_BASIC	= -DBASIC=1 -DBDW_RTL_dut_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_BASIC)))
HL_FLAGS_dut_DPA	= -DDPA=1 -DBDW_RTL_dut_DPA=1 --dpopt_auto=op,expr $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPA)))
HL_FLAGS_dut_PIPELINE	= -DPIPELINE=1 -DBDW_RTL_dut_PIPELINE=1 -DII=2 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIPELINE)))
HL_FLAGS_dut_UNROLL	= -DUNROLL=1 -DBDW_RTL_dut_UNROLL=1 -DUNROLL --flatten_arrays=all $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_UNROLL)))
HL_FLAGS_dut_PIP_URL	= -DPIP_URL=1 -DBDW_RTL_dut_PIP_URL=1 -DII=2 -DUNROLL --flatten_arrays=all $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIP_URL)))
HL_FLAGS_dut_USE_ALL	= -DUSE_ALL=1 -DBDW_RTL_dut_USE_ALL=1 -DII=2 -DUNROLL --dpopt_auto=op,expr --flatten_arrays=all $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_USE_ALL)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/dut_wrap.h
ifeq ($(BDW_SIM_CONFIG),B)



SIM_OBJS			=	$(BDW_WORKLIB)/objs/dut.o $(BDW_OBJS)
SIM_RTL_SRCS		=	dut.cc
VLOG_COSIM_TOP		=	
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	 
BDW_VLOG_LIBS		=	
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut//dut.d $(BDW_WORKLIB)/modules/main//main.d $(BDW_WORKLIB)/modules/tb//tb.d $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_SIM_CONFIG),BASIC_V)

BDW_SHAREDLIB		= 1

SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/BASIC/dut.o $(BDW_OBJS)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_BASIC_V.v
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/BASIC/v_rtl
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_BASIC
BDW_VLOG_TOP_MODS   =   
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_BASIC
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/BASIC/dut.d $(BDW_WORKLIB)/modules/main//main.d $(BDW_WORKLIB)/modules/tb//tb.d $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	incisive
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),DPA_V)

BDW_SHAREDLIB		= 1

SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/DPA/dut.o $(BDW_OBJS)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_DPA_V.v
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/DPA/v_rtl
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_DPA
BDW_VLOG_TOP_MODS   =   
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_DPA
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/DPA/dut.d $(BDW_WORKLIB)/modules/main//main.d $(BDW_WORKLIB)/modules/tb//tb.d $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	incisive
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),PIPELINE_V)

BDW_SHAREDLIB		= 1

SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/PIPELINE/dut.o $(BDW_OBJS)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_PIPELINE_V.v
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/PIPELINE/v_rtl
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_PIPELINE
BDW_VLOG_TOP_MODS   =   
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_PIPELINE
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d $(BDW_WORKLIB)/modules/main//main.d $(BDW_WORKLIB)/modules/tb//tb.d $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	incisive
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),UNROLL_V)

BDW_SHAREDLIB		= 1

SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/UNROLL/dut.o $(BDW_OBJS)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_UNROLL_V.v
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/UNROLL/v_rtl
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_UNROLL
BDW_VLOG_TOP_MODS   =   
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_UNROLL
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/UNROLL/dut.d $(BDW_WORKLIB)/modules/main//main.d $(BDW_WORKLIB)/modules/tb//tb.d $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	incisive
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),PIP_URL_V)

BDW_SHAREDLIB		= 1

SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/PIP_URL/dut.o $(BDW_OBJS)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_PIP_URL_V.v
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/PIP_URL/v_rtl
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_PIP_URL
BDW_VLOG_TOP_MODS   =   
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_PIP_URL
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/PIP_URL/dut.d $(BDW_WORKLIB)/modules/main//main.d $(BDW_WORKLIB)/modules/tb//tb.d $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	incisive
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else
ifeq ($(BDW_SIM_CONFIG),USE_ALL_V)

BDW_SHAREDLIB		= 1

SIM_OBJS			=	$(BDW_WORKLIB)/modules/dut/USE_ALL/dut.o $(BDW_OBJS)
SIM_RTL_SRCS		=	
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top_USE_ALL_V.v
BDW_NCSC_COV_OPTS   =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/dut_cosim.v $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.v 
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/dut/USE_ALL/v_rtl
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_dut_USE_ALL
BDW_VLOG_TOP_MODS   =   
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_dut_USE_ALL
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/dut_wrap.d $(BDW_WORKLIB)/modules/dut/USE_ALL/dut.d $(BDW_WORKLIB)/modules/main//main.d $(BDW_WORKLIB)/modules/tb//tb.d $(BDW_OBJDIR)/dut.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	incisive
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else

BDW_MISSING_WRAPPERS=	
ifneq ($(BDW_DEP_CYNTH_CONFIG),)
DEP_FILES           =   bdw_work/wrappers/dut_wrap.d
endif
endif
endif
endif
endif
endif
endif
endif

################################################################
# start of logicSynth Configurations
################################################################

# global logicSynth definitions


        
# logicSynthConfig specific definitions

ifeq ($(BDW_LS_CONFIG),L_BASIC)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_BASIC
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_BASIC/dut.log} {$(BDW_WORKLIB)/logicsynth/L_BASIC/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_BASIC/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v
BDW_CYNTH_CONFIG = BASIC
BDW_HLS_CONFIG = BASIC
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/BASIC
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/BASIC
endif
else
ifeq ($(BDW_LS_CONFIG),L_DPA)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_DPA
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_DPA/dut.log} {$(BDW_WORKLIB)/logicsynth/L_DPA/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_DPA/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v
BDW_CYNTH_CONFIG = DPA
BDW_HLS_CONFIG = DPA
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPA
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/DPA
endif
else
ifeq ($(BDW_LS_CONFIG),L_PIPELINE)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_PIPELINE
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut.log} {$(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v
BDW_CYNTH_CONFIG = PIPELINE
BDW_HLS_CONFIG = PIPELINE
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/PIPELINE
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/PIPELINE
endif
else
ifeq ($(BDW_LS_CONFIG),L_UNROLL)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_UNROLL
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_UNROLL/dut.log} {$(BDW_WORKLIB)/logicsynth/L_UNROLL/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_UNROLL/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.v
BDW_CYNTH_CONFIG = UNROLL
BDW_HLS_CONFIG = UNROLL
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/UNROLL
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/UNROLL
endif
else
ifeq ($(BDW_LS_CONFIG),L_PIP_URL)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_PIP_URL
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_PIP_URL/dut.log} {$(BDW_WORKLIB)/logicsynth/L_PIP_URL/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_PIP_URL/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.v
BDW_CYNTH_CONFIG = PIP_URL
BDW_HLS_CONFIG = PIP_URL
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/PIP_URL
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/PIP_URL
endif
else
ifeq ($(BDW_LS_CONFIG),L_USE_ALL)

BDW_LS_CONFIG_DIR = $(BDW_WORKLIB)/logicsynth/L_USE_ALL
BDW_LS_CONFIG_LOGS = {$(BDW_WORKLIB)/logicsynth/L_USE_ALL/dut.log} {$(BDW_WORKLIB)/logicsynth/L_USE_ALL/dut.bdr}
BDW_LS_CMD = bdw_runsgenus
ifeq ($(BDW_MODULE),dut)
BDW_LS_INFO = $(BDW_WORKLIB)/logicsynth/L_USE_ALL/dut.info
BDW_VRTL_FILE = $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.v
BDW_CYNTH_CONFIG = USE_ALL
BDW_HLS_CONFIG = USE_ALL
BDW_CYNTH_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/USE_ALL
BDW_HLS_CONFIG_DIR = $(BDW_WORKLIB)/modules/dut/USE_ALL
endif
endif
endif
endif
endif
endif
endif

################################################################
# start of analysis Configurations
################################################################

# global analysis definitions


        
# analysisConfig specific definitions


ifeq ($(BDW_SHAREDLIB),0)
	EXECUTABLE			= scsim_$(BDW_SIM_CONFIG)
	SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
else
	EXECUTABLE			= $(BDW_VLOG_SIM)
	COSIM_FILES			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so $(VLOG_COSIM_TOP)
	SIM_BUILD			= $(COSIM_FILES)
endif


################################################################
# start of place and route configurations
################################################################

# pnrConfig specific definitions 


######################################################################
# Include dependency files for this configuration.
# These will be automatically generted if they do not exist.
# Avoid including (and so generating) these files for 'clean' and
# 'help' commands.
######################################################################
ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
    ifeq ($(findstring clean,$(MAKECMDGOALS)),)
        ifeq ($(findstring help,$(MAKECMDGOALS)),)
            ifneq ($(DEP_FILES),)
                -include $(DEP_FILES)
            endif
        endif
    endif
endif

######################################################################
## Include pre-defined variables and rules provided with BDW
######################################################################
include ${STRATUS_HOME}/share/stratus/source/bdw.mak

######################################################################
## Error checking rules for variable and environment settings.
######################################################################
vista_needs_gcc3:
ifeq ($(BDW_GCC_VERSION),2.95.3)
	@echo "*** You must use GCC 3 to use Vista." ;  exit
endif

#########################################################
## Start of the "ALL" rule set
#########################################################

pnr_all:


kill_pnr_all:


clean_pnr_all:


power_all:


kill_power_all:


clean_power_all:


equiv_all:


kill_equiv_all:


clean_equiv_all:


ls_all: ls_L_BASIC ls_L_DPA ls_L_PIPELINE ls_L_UNROLL ls_L_PIP_URL ls_L_USE_ALL


kill_ls_all: kill_ls_L_BASIC kill_ls_L_DPA kill_ls_L_PIPELINE kill_ls_L_UNROLL kill_ls_L_PIP_URL kill_ls_L_USE_ALL


clean_ls_all: clean_ls_L_BASIC clean_ls_L_DPA clean_ls_L_PIPELINE clean_ls_L_UNROLL clean_ls_L_PIP_URL clean_ls_L_USE_ALL


analysis_all:


kill_analysis_all:


clean_analysis_all:


hls_all: hls_B hls_BASIC_V hls_DPA_V hls_PIPELINE_V hls_UNROLL_V hls_PIP_URL_V hls_USE_ALL_V


hls_dut_all: hls_dut_BASIC hls_dut_DPA hls_dut_PIPELINE hls_dut_UNROLL hls_dut_PIP_URL hls_dut_USE_ALL


cynth_all: cynth_B cynth_BASIC_V cynth_DPA_V cynth_PIPELINE_V cynth_UNROLL_V cynth_PIP_URL_V cynth_USE_ALL_V


kill_hls_all kill_cynth_all: kill_hls_dut_BASIC kill_hls_dut_DPA kill_hls_dut_PIPELINE kill_hls_dut_UNROLL kill_hls_dut_PIP_URL kill_hls_dut_USE_ALL


all_deps: clean_deps
	-@$(MAKE) gen_all_deps >& /dev/null



gen_all_deps: 
	-@$(MAKE) deps BDW_SIM_CONFIG=B >& /dev/null
	-@$(MAKE) deps BDW_SIM_CONFIG=BASIC_V >& /dev/null
	-@$(MAKE) deps BDW_SIM_CONFIG=DPA_V >& /dev/null
	-@$(MAKE) deps BDW_SIM_CONFIG=PIPELINE_V >& /dev/null
	-@$(MAKE) deps BDW_SIM_CONFIG=UNROLL_V >& /dev/null
	-@$(MAKE) deps BDW_SIM_CONFIG=PIP_URL_V >& /dev/null
	-@$(MAKE) deps BDW_SIM_CONFIG=USE_ALL_V >& /dev/null


.PHONY: gen_all_deps
.PHONY: all_deps


all_wrappers : prebuild_wrappers

prebuild_wrappers:
ifneq ($(BDW_ALL_WRAPPERS),)
	@$(MAKE) -j 1 $(BDW_ALL_WRAPPERS)
endif

prebuild_rtl:
ifneq ($(SIM_RTL_TARGETS),)
	@$(MAKE) $(SIM_RTL_TARGETS)
endif


clean_hls_all: clean_hls_B clean_hls_BASIC_V clean_hls_DPA_V clean_hls_PIPELINE_V clean_hls_UNROLL_V clean_hls_PIP_URL_V clean_hls_USE_ALL_V

hls_clean_all: clean_hls_all
cynth_clean_all: clean_hls_all
clean_cynth_all: clean_hls_all
prebuild_all: prebuild_B prebuild_BASIC_V prebuild_DPA_V prebuild_PIPELINE_V prebuild_UNROLL_V prebuild_PIP_URL_V prebuild_USE_ALL_V

build_all: build_B build_BASIC_V build_DPA_V build_PIPELINE_V build_UNROLL_V build_PIP_URL_V build_USE_ALL_V

sim_all: sim_B sim_BASIC_V sim_DPA_V sim_PIPELINE_V sim_UNROLL_V sim_PIP_URL_V sim_USE_ALL_V

kill_sim_all: kill_sim_B kill_sim_BASIC_V kill_sim_DPA_V kill_sim_PIPELINE_V kill_sim_UNROLL_V kill_sim_PIP_URL_V kill_sim_USE_ALL_V

clean_wrap_all: clean_wrap_B clean_wrap_BASIC_V clean_wrap_DPA_V clean_wrap_PIPELINE_V clean_wrap_UNROLL_V clean_wrap_PIP_URL_V clean_wrap_USE_ALL_V

kill_all: 
	@bdw_kill -all


clean_cachelib:
	@rm -rf /home/u107/u107061139/EE6470/midterm/cachelib

clean_all:
	@if [ -d $(BDW_WORKLIB) ] ; then \
		td=`mktemp -d $(BDW_WORKLIB).XXXXXXXX` ; \
		mv $(BDW_WORKLIB) $${td} ; \
		for f in *.vcd *.fsdb ; do \
			if [ -f $$f ] ; then \
				mv $$f $${td} ; \
			fi ; \
		done ; \
		rm -rf $${td} & \
	fi

clean_sim_all: clean_B clean_BASIC_V clean_DPA_V clean_PIPELINE_V clean_UNROLL_V clean_PIP_URL_V clean_USE_ALL_V clean_deps
	@rm -rf *.vcd *.fsdb $(BDW_OBJDIR) $(BDW_SIMDIR) $(BDW_MODULEDIR) $(BDW_WRAPDIR)

jobs:
	@bdw_ps

clean_libs:
	@rm -rf $(BDW_LIBDIR)

clean_deps:
	@if [ -d $(BDW_WORKLIB) ]; then find $(BDW_WORKLIB) -name '*.d' -exec rm {} \; ; fi

deps : $(DEP_FILES)

#########################################################
## End of the "ALL" rule set
#########################################################



help:
	@echo 
	@echo "Makefile generated by bdw_makegen version 19.12-s100 from project.tcl"
	@echo 
	@echo "PROJECT-WIDE RULES:"
	@echo "    workbench   - Stratus Workbench for the project."
	@echo 
	@echo "GROUP RULES:"
	@echo "    hls_all             - Run stratus_hls for all modules for all configurations."
	@echo "    clean_hls_all       - Clear all RTL files generated for all stratus_hls runs for each configuration."
	@echo "    ls_all      - Run logic synthesis for all logicSynthConfigs "
	@echo "    clean_ls_all- Removes logic synthesis results for all logicSynthConfigs "
	@echo "    build_all           - Build all simulation executables or shared libraries (but don't run them)."
	@echo "    sim_all             - Build AND run all simulation configurations."
	@echo "    power_all           - Run all Power configurations."
	@echo "    pnr_all             - Run all place and route configurations."
	@echo "    equiv_all           - Run all whole-design equivalence checking configurations."
	@echo "    clean_all           - Removes the $(BDW_WORKLIB) directory, thus cleaning up everything."
	@echo "    clean_sim_all       - Clean up all modules for all simulation configurations."
	@echo "    clean_power_all     - Clean all files generated for all power estimation configs."
	@echo "    clean_pnr_all       - Clean all files generated for all place and route configs."
	@echo "    clean_equiv_all     - Clean all files generated for all equivalence checking configs."
	@echo "    clean_libs          - Clean up all locally built items for cynthLibs."
	@echo "    clean_cachelib      - Clean up the local Cache Library."
	@echo "    clean_deps          - Clean up auto-generated dependencies so they will be re-generated."
	@echo "    clean_wrap_all      - Clean all generated wrapper files."
	@echo "    all_deps            - Re-creates all dependencies."
	@echo "    all_wrappers        - Generates all out of data cynthModule wrappers."
	@echo "    jobs                - List all current jobs for this project."
	@echo "    kill_all            - Kills alls current jobs for this project."
	@echo "    kill_hls_all        - Kills alls stratus_hls jobs for this project."
	@echo "    kill_ls_all         - Kill all logic synthesis jobs for this project."
	@echo "    kill_sim_all        - Kill all simulation jobs for this project."
	@echo "    kill_pnr_all        - Kill all place and route jobs for this project."
	@echo "    kill_power_all      - Kill all power estimation jobs for this project."
	@echo "    kill_equiv_all      - Kill all equivalence checking jobs for this project."
	@echo 
	@echo "PER-hls_config RULES:"
	@echo "    hls_<hls_config>   - Run stratus_hls on all modules that have a hls_config with the given name to Verilog"
	@echo "    clean_<hls_config> - Clean the given hls_config from all modules that have it"
	@echo "    view_<hls_config>  - View schematics all modules that have a hls_config with the given name"
	@echo 
	@echo "PER-module-and-hls_config RULES:"
	@echo "    hls_<module>_all           - Run stratus_hls on the given module and all its hls_configs to Verilog"
	@echo "    hls_<module>_<hls_config>  - Run stratus_hls on the given module and hls_config to Verilog"
	@echo "    clean_hls_<module>_<hls_config>  - Clean synthesis results for the given module and hls_config"
	@echo "    view_<module>_<hls_config> - View schematic for the given module and cynhtConfig"
	@echo "    kill_<module>_<hls_config> - Kill stratus_hls job for this module and hls_config"
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module dut:"
	@echo "		BASIC	DPA	PIPELINE	UNROLL"
	@echo "		PIP_URL	USE_ALL"
	@echo 
	@echo "PER-sim_config RULES:"
	@echo "    clean_hls_<sim_config> - Clean stratus_hls output files for all modules required by the named sim_config"
	@echo "    build_<sim_config>   - Build the simulation executable for the named sim_config"
	@echo "    sim_<sim_config>     - Builds and executes a simulation for the named sim_config"
	@echo "    kill_sim_<sim_config> - Kills the simulation for the  named sim_config"
	@echo "    debug_<sim_config>   - Builds a simulation for the named sim_config for use with the gdb debugger under stratus_ide"
	@echo "    view_<sim_config>    - View schematics for all modules required by the named sim_config"
	@echo "    clean_<sim_config>   - Clean up files built for the named sim_config"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	BASIC_V	DPA_V	PIPELINE_V"
	@echo "	UNROLL_V	PIP_URL_V	USE_ALL_V"

	@echo
	@echo "PER-logicSynthConfig Rules:"
	@echo "    ls_<logicSynthConfig> - Run logic synthesis for the modules in this logicSynthConfig"
	@echo "    view_ls_<logicSynthConfig> - View schematics for the modules in this logicSynthConfig"
	@echo "    clean_ls_<logicSynthConfig> - Removes logic synthesis results for this logicSynthConfig"
	@echo "    kill_ls_<logicSynthConfig> - Kills the logic synthesis job for this logicSynthConfig"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo "	L_BASIC	L_DPA	L_PIPELINE	L_UNROLL"
	@echo "	L_PIP_URL	L_USE_ALL"

#########################################################
## Start of the rule set for sim_config B
#########################################################


hls_B: 



cynth_B: 

hls_clean_B: clean_hls_B

cynth_clean_B: hls_clean_B

clean_hls_B: $(addprefix clean_, ) 

clean_cynth_B: clean_hls_B

prebuild_B: prebuild_wrappers 

ifeq ($(CWBExec),1)

dbg_build_B:
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(MAKE) BDW_DEBUG=1 build_B


build_B: prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=B

else
.PHONY: build_B

dbg_build_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.B $(MAKE) CWBExec=1 BDW_DEBUG=1 build_B

build_B:
	@bdw_exec -jobproject project.tcl -job build.B $(MAKE) CWBExec=1 build_B
endif


ifeq ($(CWBExec),1)
sim_B: build_B
	@$(MAKE) run_sim BDW_SIM_CONFIG=B

else
.PHONY: sim_B

sim_B:
	@bdw_exec -jobproject project.tcl -job sim.B $(MAKE) CWBExec=1 sim_B
endif


kill_sim_B:
	@bdw_kill -job sim.B
	@bdw_kill -job sim.B.s


catlog_B: 
debug_B: 
	@$(MAKE) BDW_DEBUG=1 build_B
	@$(MAKE) run_sim BDW_SIM_CONFIG=B RUN_DEBUGGER=1
    
view_B: build_B
	@bdw_view_verdi -project project.tcl -simconfig B

clean_wrap_B:
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/B $(BDW_WORKLIB)/sims/B/sim_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=B

clean_B: clean_hls_B clean_sim_B

clean_sim_B: clean_wrap_B
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B
	@rm -rf $(BDW_WORKLIB)/jobs/build.B


#########################################################
## Start of the rule set for sim_config BASIC_V
#########################################################


hls_BASIC_V:  
	$(MAKE) -j1 hls_dut_BASIC



cynth_BASIC_V:  
	$(MAKE) -j1 hlsc_dut_BASIC

hls_clean_BASIC_V: clean_hls_BASIC_V

cynth_clean_BASIC_V: hls_clean_BASIC_V

clean_hls_BASIC_V: $(addprefix clean_, hls_dut_BASIC) 

clean_cynth_BASIC_V: clean_hls_BASIC_V

prebuild_BASIC_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_BASIC

ifeq ($(CWBExec),1)

dbg_build_BASIC_V:
	@$(MAKE) siminfo BDW_SIM_CONFIG=BASIC_V
	@$(MAKE) BDW_DEBUG=1 build_BASIC_V


build_BASIC_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_BASIC
	@$(MAKE) siminfo BDW_SIM_CONFIG=BASIC_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=BASIC_V

else
.PHONY: build_BASIC_V

dbg_build_BASIC_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.BASIC_V $(MAKE) CWBExec=1 BDW_DEBUG=1 build_BASIC_V

build_BASIC_V:
	@bdw_exec -jobproject project.tcl -job build.BASIC_V $(MAKE) CWBExec=1 build_BASIC_V
endif


ifeq ($(CWBExec),1)
sim_BASIC_V: build_BASIC_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=BASIC_V

else
.PHONY: sim_BASIC_V

sim_BASIC_V:
	@bdw_exec -jobproject project.tcl -job sim.BASIC_V $(MAKE) CWBExec=1 sim_BASIC_V
endif


kill_sim_BASIC_V:
	@bdw_kill -job sim.BASIC_V
	@bdw_kill -job sim.BASIC_V.s


catlog_BASIC_V: catVLGLog_dut_BASIC
debug_BASIC_V: 
	@$(MAKE) BDW_DEBUG=1 build_BASIC_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=BASIC_V RUN_DEBUGGER=1
    
view_BASIC_V: build_BASIC_V
	@bdw_view_verdi -project project.tcl -simconfig BASIC_V

clean_wrap_BASIC_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/BASIC_V $(BDW_WORKLIB)/sims/BASIC_V/sim_BASIC_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=BASIC_V

clean_BASIC_V: clean_hls_BASIC_V clean_sim_BASIC_V

clean_sim_BASIC_V: clean_wrap_BASIC_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.BASIC_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.BASIC_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.BASIC_V


$(BDW_WORKLIB)/sims/top_BASIC_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -simconfig BASIC_V -top top



#########################################################
## Start of the rule set for sim_config DPA_V
#########################################################


hls_DPA_V:  
	$(MAKE) -j1 hls_dut_DPA



cynth_DPA_V:  
	$(MAKE) -j1 hlsc_dut_DPA

hls_clean_DPA_V: clean_hls_DPA_V

cynth_clean_DPA_V: hls_clean_DPA_V

clean_hls_DPA_V: $(addprefix clean_, hls_dut_DPA) 

clean_cynth_DPA_V: clean_hls_DPA_V

prebuild_DPA_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_DPA

ifeq ($(CWBExec),1)

dbg_build_DPA_V:
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPA_V
	@$(MAKE) BDW_DEBUG=1 build_DPA_V


build_DPA_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_DPA
	@$(MAKE) siminfo BDW_SIM_CONFIG=DPA_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=DPA_V

else
.PHONY: build_DPA_V

dbg_build_DPA_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.DPA_V $(MAKE) CWBExec=1 BDW_DEBUG=1 build_DPA_V

build_DPA_V:
	@bdw_exec -jobproject project.tcl -job build.DPA_V $(MAKE) CWBExec=1 build_DPA_V
endif


ifeq ($(CWBExec),1)
sim_DPA_V: build_DPA_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPA_V

else
.PHONY: sim_DPA_V

sim_DPA_V:
	@bdw_exec -jobproject project.tcl -job sim.DPA_V $(MAKE) CWBExec=1 sim_DPA_V
endif


kill_sim_DPA_V:
	@bdw_kill -job sim.DPA_V
	@bdw_kill -job sim.DPA_V.s


catlog_DPA_V: catVLGLog_dut_DPA
debug_DPA_V: 
	@$(MAKE) BDW_DEBUG=1 build_DPA_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=DPA_V RUN_DEBUGGER=1
    
view_DPA_V: build_DPA_V
	@bdw_view_verdi -project project.tcl -simconfig DPA_V

clean_wrap_DPA_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/DPA_V $(BDW_WORKLIB)/sims/DPA_V/sim_DPA_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=DPA_V

clean_DPA_V: clean_hls_DPA_V clean_sim_DPA_V

clean_sim_DPA_V: clean_wrap_DPA_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPA_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.DPA_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.DPA_V


$(BDW_WORKLIB)/sims/top_DPA_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -simconfig DPA_V -top top



#########################################################
## Start of the rule set for sim_config PIPELINE_V
#########################################################


hls_PIPELINE_V:  
	$(MAKE) -j1 hls_dut_PIPELINE



cynth_PIPELINE_V:  
	$(MAKE) -j1 hlsc_dut_PIPELINE

hls_clean_PIPELINE_V: clean_hls_PIPELINE_V

cynth_clean_PIPELINE_V: hls_clean_PIPELINE_V

clean_hls_PIPELINE_V: $(addprefix clean_, hls_dut_PIPELINE) 

clean_cynth_PIPELINE_V: clean_hls_PIPELINE_V

prebuild_PIPELINE_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_PIPELINE

ifeq ($(CWBExec),1)

dbg_build_PIPELINE_V:
	@$(MAKE) siminfo BDW_SIM_CONFIG=PIPELINE_V
	@$(MAKE) BDW_DEBUG=1 build_PIPELINE_V


build_PIPELINE_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_PIPELINE
	@$(MAKE) siminfo BDW_SIM_CONFIG=PIPELINE_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=PIPELINE_V

else
.PHONY: build_PIPELINE_V

dbg_build_PIPELINE_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.PIPELINE_V $(MAKE) CWBExec=1 BDW_DEBUG=1 build_PIPELINE_V

build_PIPELINE_V:
	@bdw_exec -jobproject project.tcl -job build.PIPELINE_V $(MAKE) CWBExec=1 build_PIPELINE_V
endif


ifeq ($(CWBExec),1)
sim_PIPELINE_V: build_PIPELINE_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=PIPELINE_V

else
.PHONY: sim_PIPELINE_V

sim_PIPELINE_V:
	@bdw_exec -jobproject project.tcl -job sim.PIPELINE_V $(MAKE) CWBExec=1 sim_PIPELINE_V
endif


kill_sim_PIPELINE_V:
	@bdw_kill -job sim.PIPELINE_V
	@bdw_kill -job sim.PIPELINE_V.s


catlog_PIPELINE_V: catVLGLog_dut_PIPELINE
debug_PIPELINE_V: 
	@$(MAKE) BDW_DEBUG=1 build_PIPELINE_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=PIPELINE_V RUN_DEBUGGER=1
    
view_PIPELINE_V: build_PIPELINE_V
	@bdw_view_verdi -project project.tcl -simconfig PIPELINE_V

clean_wrap_PIPELINE_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/PIPELINE_V $(BDW_WORKLIB)/sims/PIPELINE_V/sim_PIPELINE_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=PIPELINE_V

clean_PIPELINE_V: clean_hls_PIPELINE_V clean_sim_PIPELINE_V

clean_sim_PIPELINE_V: clean_wrap_PIPELINE_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.PIPELINE_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.PIPELINE_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.PIPELINE_V


$(BDW_WORKLIB)/sims/top_PIPELINE_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -simconfig PIPELINE_V -top top



#########################################################
## Start of the rule set for sim_config UNROLL_V
#########################################################


hls_UNROLL_V:  
	$(MAKE) -j1 hls_dut_UNROLL



cynth_UNROLL_V:  
	$(MAKE) -j1 hlsc_dut_UNROLL

hls_clean_UNROLL_V: clean_hls_UNROLL_V

cynth_clean_UNROLL_V: hls_clean_UNROLL_V

clean_hls_UNROLL_V: $(addprefix clean_, hls_dut_UNROLL) 

clean_cynth_UNROLL_V: clean_hls_UNROLL_V

prebuild_UNROLL_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_UNROLL

ifeq ($(CWBExec),1)

dbg_build_UNROLL_V:
	@$(MAKE) siminfo BDW_SIM_CONFIG=UNROLL_V
	@$(MAKE) BDW_DEBUG=1 build_UNROLL_V


build_UNROLL_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_UNROLL
	@$(MAKE) siminfo BDW_SIM_CONFIG=UNROLL_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=UNROLL_V

else
.PHONY: build_UNROLL_V

dbg_build_UNROLL_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.UNROLL_V $(MAKE) CWBExec=1 BDW_DEBUG=1 build_UNROLL_V

build_UNROLL_V:
	@bdw_exec -jobproject project.tcl -job build.UNROLL_V $(MAKE) CWBExec=1 build_UNROLL_V
endif


ifeq ($(CWBExec),1)
sim_UNROLL_V: build_UNROLL_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=UNROLL_V

else
.PHONY: sim_UNROLL_V

sim_UNROLL_V:
	@bdw_exec -jobproject project.tcl -job sim.UNROLL_V $(MAKE) CWBExec=1 sim_UNROLL_V
endif


kill_sim_UNROLL_V:
	@bdw_kill -job sim.UNROLL_V
	@bdw_kill -job sim.UNROLL_V.s


catlog_UNROLL_V: catVLGLog_dut_UNROLL
debug_UNROLL_V: 
	@$(MAKE) BDW_DEBUG=1 build_UNROLL_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=UNROLL_V RUN_DEBUGGER=1
    
view_UNROLL_V: build_UNROLL_V
	@bdw_view_verdi -project project.tcl -simconfig UNROLL_V

clean_wrap_UNROLL_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/UNROLL_V $(BDW_WORKLIB)/sims/UNROLL_V/sim_UNROLL_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=UNROLL_V

clean_UNROLL_V: clean_hls_UNROLL_V clean_sim_UNROLL_V

clean_sim_UNROLL_V: clean_wrap_UNROLL_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.UNROLL_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.UNROLL_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.UNROLL_V


$(BDW_WORKLIB)/sims/top_UNROLL_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -simconfig UNROLL_V -top top



#########################################################
## Start of the rule set for sim_config PIP_URL_V
#########################################################


hls_PIP_URL_V:  
	$(MAKE) -j1 hls_dut_PIP_URL



cynth_PIP_URL_V:  
	$(MAKE) -j1 hlsc_dut_PIP_URL

hls_clean_PIP_URL_V: clean_hls_PIP_URL_V

cynth_clean_PIP_URL_V: hls_clean_PIP_URL_V

clean_hls_PIP_URL_V: $(addprefix clean_, hls_dut_PIP_URL) 

clean_cynth_PIP_URL_V: clean_hls_PIP_URL_V

prebuild_PIP_URL_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_PIP_URL

ifeq ($(CWBExec),1)

dbg_build_PIP_URL_V:
	@$(MAKE) siminfo BDW_SIM_CONFIG=PIP_URL_V
	@$(MAKE) BDW_DEBUG=1 build_PIP_URL_V


build_PIP_URL_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_PIP_URL
	@$(MAKE) siminfo BDW_SIM_CONFIG=PIP_URL_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=PIP_URL_V

else
.PHONY: build_PIP_URL_V

dbg_build_PIP_URL_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.PIP_URL_V $(MAKE) CWBExec=1 BDW_DEBUG=1 build_PIP_URL_V

build_PIP_URL_V:
	@bdw_exec -jobproject project.tcl -job build.PIP_URL_V $(MAKE) CWBExec=1 build_PIP_URL_V
endif


ifeq ($(CWBExec),1)
sim_PIP_URL_V: build_PIP_URL_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=PIP_URL_V

else
.PHONY: sim_PIP_URL_V

sim_PIP_URL_V:
	@bdw_exec -jobproject project.tcl -job sim.PIP_URL_V $(MAKE) CWBExec=1 sim_PIP_URL_V
endif


kill_sim_PIP_URL_V:
	@bdw_kill -job sim.PIP_URL_V
	@bdw_kill -job sim.PIP_URL_V.s


catlog_PIP_URL_V: catVLGLog_dut_PIP_URL
debug_PIP_URL_V: 
	@$(MAKE) BDW_DEBUG=1 build_PIP_URL_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=PIP_URL_V RUN_DEBUGGER=1
    
view_PIP_URL_V: build_PIP_URL_V
	@bdw_view_verdi -project project.tcl -simconfig PIP_URL_V

clean_wrap_PIP_URL_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/PIP_URL_V $(BDW_WORKLIB)/sims/PIP_URL_V/sim_PIP_URL_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=PIP_URL_V

clean_PIP_URL_V: clean_hls_PIP_URL_V clean_sim_PIP_URL_V

clean_sim_PIP_URL_V: clean_wrap_PIP_URL_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.PIP_URL_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.PIP_URL_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.PIP_URL_V


$(BDW_WORKLIB)/sims/top_PIP_URL_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -simconfig PIP_URL_V -top top



#########################################################
## Start of the rule set for sim_config USE_ALL_V
#########################################################


hls_USE_ALL_V:  
	$(MAKE) -j1 hls_dut_USE_ALL



cynth_USE_ALL_V:  
	$(MAKE) -j1 hlsc_dut_USE_ALL

hls_clean_USE_ALL_V: clean_hls_USE_ALL_V

cynth_clean_USE_ALL_V: hls_clean_USE_ALL_V

clean_hls_USE_ALL_V: $(addprefix clean_, hls_dut_USE_ALL) 

clean_cynth_USE_ALL_V: clean_hls_USE_ALL_V

prebuild_USE_ALL_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_USE_ALL

ifeq ($(CWBExec),1)

dbg_build_USE_ALL_V:
	@$(MAKE) siminfo BDW_SIM_CONFIG=USE_ALL_V
	@$(MAKE) BDW_DEBUG=1 build_USE_ALL_V


build_USE_ALL_V: prebuild_wrappers  
	$(MAKE) -j1 hls_dut_USE_ALL
	@$(MAKE) siminfo BDW_SIM_CONFIG=USE_ALL_V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=USE_ALL_V

else
.PHONY: build_USE_ALL_V

dbg_build_USE_ALL_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.USE_ALL_V $(MAKE) CWBExec=1 BDW_DEBUG=1 build_USE_ALL_V

build_USE_ALL_V:
	@bdw_exec -jobproject project.tcl -job build.USE_ALL_V $(MAKE) CWBExec=1 build_USE_ALL_V
endif


ifeq ($(CWBExec),1)
sim_USE_ALL_V: build_USE_ALL_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=USE_ALL_V

else
.PHONY: sim_USE_ALL_V

sim_USE_ALL_V:
	@bdw_exec -jobproject project.tcl -job sim.USE_ALL_V $(MAKE) CWBExec=1 sim_USE_ALL_V
endif


kill_sim_USE_ALL_V:
	@bdw_kill -job sim.USE_ALL_V
	@bdw_kill -job sim.USE_ALL_V.s


catlog_USE_ALL_V: catVLGLog_dut_USE_ALL
debug_USE_ALL_V: 
	@$(MAKE) BDW_DEBUG=1 build_USE_ALL_V
	@$(MAKE) run_sim BDW_SIM_CONFIG=USE_ALL_V RUN_DEBUGGER=1
    
view_USE_ALL_V: build_USE_ALL_V
	@bdw_view_verdi -project project.tcl -simconfig USE_ALL_V

clean_wrap_USE_ALL_V:
	@rm -f $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/USE_ALL_V $(BDW_WORKLIB)/sims/USE_ALL_V/sim_USE_ALL_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=USE_ALL_V

clean_USE_ALL_V: clean_hls_USE_ALL_V clean_sim_USE_ALL_V

clean_sim_USE_ALL_V: clean_wrap_USE_ALL_V
	@rm -rf $(BDW_WORKLIB)/jobs/sim.USE_ALL_V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.USE_ALL_V
	@rm -rf $(BDW_WORKLIB)/jobs/build.USE_ALL_V


$(BDW_WORKLIB)/sims/top_USE_ALL_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -simconfig USE_ALL_V -top top


#############################################################################
# libesc building rules
#############################################################################
libesc_WORKDIR = $(BDW_WORKLIB)/libesc

BDW_ESC_SOURCES = libesc.o esc_elab.o esc_cleanup.o
BDW_ESC_OBJS = $(addprefix $(libesc_WORKDIR)/, $(BDW_ESC_SOURCES))

ifeq ($(BDW_PRECOMP_ESC),1)
export BDW_ESC_LIB = 
else
export BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
endif

$(libesc_WORKDIR)/libesc.a : $(BDW_ESC_OBJS)
	$(BDW_AR) $(libesc_WORKDIR)/libesc.a $(BDW_ESC_OBJS)

${libesc_WORKDIR}/%.o   :   ${STRATUS_HOME}/share/stratus/source/%.cc 
	@if [ ! -d ${libesc_WORKDIR} ]; then mkdir -p ${libesc_WORKDIR}; fi
ifeq ($(BDW_NCSC),1)
	${BDW_CC} "-TP ${BDW_CCFLAGS} ${BDW_COUT}$@ " $<
else
	${BDW_CC} -TP ${BDW_CCFLAGS} ${BDW_COUT}$@ $<
endif



##############################################################
## Rule for building all Cynth libraries external to the project
##############################################################

build_all_cynthLibs: $(BDW_BOTH_LIBPREP_EXTERNAL)

list_cynthLibs:


##############################################################
## START OF HLS MODULE RULES
##############################################################



##############################################################
## HLS Module "dut"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/dut.d :  dut.cc
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_OBJDIR)/dut.o $(BDW_OBJDIR)/dut.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/dut_trace.h : $(BDW_WORKLIB)/wrappers/dut_trace.h.updated

$(BDW_WORKLIB)/wrappers/dut_trace.h.updated :  dut.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -vcd 
	@touch $(BDW_WORKLIB)/wrappers/dut_trace.h.updated



$(BDW_WORKLIB)/objs/dut.o:  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(BDW_OBJDIR) ]; then mkdir -p $(BDW_OBJDIR); fi
	$(BDW_CC)  $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/objs/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

.INTERMEDIATE : dut_wrap.h

dut_wrap.h : $(BDW_WORKLIB)/wrappers/dut_wrap.h

$(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_cosim.v   : $(BDW_WRAPDIR)/dut.updated

$(BDW_WRAPDIR)/dut.updated :  dut.cc 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(STRATUS_HOME)/bin/bdw_wrapgen -project project.tcl -module dut "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/dut.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -vcd 
	@touch $(BDW_WORKLIB)/wrappers/dut_trace.h.updated
$(BDW_WORKLIB)/wrappers/dut_wrap.d :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   dut.cc \
		| sed 's|dut\.o[ :]*|$(BDW_WRAPDIR)/dut.updated $(BDW_WORKLIB)/wrappers/dut_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/dut_wrap.d 




##############################################################
## HLS Module "dut" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_BASIC = 
LIB_INCLUDES_dut_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_BASIC = 
LIB_NAMES_FOR_VLOG_dut_BASIC = 
PREFIXED_LIB_NAMES_dut_BASIC = 
CCFLAGS_dut_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/BASIC/c_parts -DBASIC=1 -DBDW_RTL_dut_BASIC=1  $(LIB_INCLUDES_dut_BASIC)
CCFLAGS_dut_BASIC += ${BDW_CCFLAGS_TAIL}

hls_dut_BASIC : hlsc_dut_BASIC

cynth_dut_BASIC : hlsc_dut_BASIC 

elab_dut_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr

optim_dut_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr

sched_dut_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr

hlsc_dut_BASIC :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=dut BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.dut.BASIC $(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=dut BDW_HLS_CONFIG=BASIC
endif

clean_cynth_dut_BASIC: clean_hls_dut_BASIC

clean_dut_BASIC: clean_hls_dut_BASIC

clean_hls_dut_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/dut/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.BASIC.s

kill_hls_dut_BASIC:
	@bdw_kill -job hls.dut.BASIC
	@bdw_kill -job hls.dut.BASIC.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/BASIC/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_BASIC :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig BASIC



$(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdl : $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc

$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
	bdw_exec -jobproject project.tcl -job hls.dut.BASIC.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_BASIC) \
		-d $(BDW_WORKLIB)/modules/dut/BASIC -o dut_rtl.cc \
		--hls_module=dut --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 dut.cc
	
	
	
	
	
$(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h : $(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig BASIC -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h.updated

catHLLog_dut_BASIC:
	cat $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_BASIC : hls_dut_BASIC 


hls_dut_BASIC : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_BASIC)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v prep_vlog_dut_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.BASIC $(MAKE) CWBExec=1 hls_dut_BASIC
endif

catVLGLog_dut_BASIC : catHLLog_dut_BASIC
	cat $(BDW_WORKLIB)/modules/dut/BASIC/stratus_vlg.log

#
#	view rule
#
view_dut_BASIC : hls_dut_BASIC
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig BASIC

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/BASIC/dut_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_dut_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl dut BASIC]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/BASIC/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_dut_BASIC) -o $(BDW_WORKLIB)/modules/dut/BASIC/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/BASIC/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/BASIC -I./ $(CCFLAGS_dut_BASIC) $(shell echo "puts [extractHoistLibDashIs project.tcl dut BASIC]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/BASIC/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/BASIC/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_BASIC)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/BASIC/dut.o $(BDW_WORKLIB)/modules/dut/BASIC/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/BASIC"
##############################################################

dut_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/dut/BASIC
dut_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_BASIC
dut_BASIC_LIBNAME = dut_BASIC
dut_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/dut/BASIC
dut_BASIC_C_PARTS_A = $(dut_BASIC_WORKLIB)/objs/libdut_BASIC.a

prep_c_dut_BASIC : $(dut_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_BASIC_WORKLIB) prep_c

prep_vlog_dut_BASIC : $(dut_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_BASIC_WORKLIB) prep_vlog

prep_dut_BASIC : $(dut_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_BASIC_WORKLIB) prep

$(dut_BASIC_WORKLIB)/Makefile : $(dut_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_BASIC_WORKLIB) ]; then mkdir -p $(dut_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_BASIC_SRCDIR) -o $(dut_BASIC_WORKLIB)/Makefile -module dut -cynthconfig BASIC  

$(dut_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_BASIC_WORKLIB) ]; then mkdir -p $(dut_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_BASIC_WORKLIB)/dut_BASIC.d :
	@if [ ! -d $(dut_BASIC_WORKLIB) ]; then mkdir -p $(dut_BASIC_WORKLIB); fi
	@touch $(dut_BASIC_WORKLIB)/dut_BASIC.d



#
# HLS config DPA
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_DPA = 
LIB_INCLUDES_dut_DPA = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPA))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_DPA = 
LIB_NAMES_FOR_VLOG_dut_DPA = 
PREFIXED_LIB_NAMES_dut_DPA = 
CCFLAGS_dut_DPA = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/DPA/c_parts -DDPA=1 -DBDW_RTL_dut_DPA=1  $(LIB_INCLUDES_dut_DPA)
CCFLAGS_dut_DPA += ${BDW_CCFLAGS_TAIL}

hls_dut_DPA : hlsc_dut_DPA

cynth_dut_DPA : hlsc_dut_DPA 

elab_dut_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr

optim_dut_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr

sched_dut_DPA : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr

hlsc_dut_DPA :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=dut BDW_HLS_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hls.dut.DPA $(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=DPA BDW_MODULE=dut BDW_HLS_CONFIG=DPA
endif

clean_cynth_dut_DPA: clean_hls_dut_DPA

clean_dut_DPA: clean_hls_dut_DPA

clean_hls_dut_DPA:
	@rm -rf $(BDW_WORKLIB)/modules/dut/DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPA
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.DPA.s

kill_hls_dut_DPA:
	@bdw_kill -job hls.dut.DPA
	@bdw_kill -job hls.dut.DPA.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),DPA)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/DPA/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_DPA :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig DPA



$(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdl : $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc

$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/DPA ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/DPA; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=DPA BDW_CYNTH_CONFIG=DPA \
	bdw_exec -jobproject project.tcl -job hls.dut.DPA.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_DPA) \
		-d $(BDW_WORKLIB)/modules/dut/DPA -o dut_rtl.cc \
		--hls_module=dut --hls_config=DPA --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_DPA))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_DPA))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_DPA))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 dut.cc
	
	
	
	
	
$(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h : $(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig DPA -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h.updated

catHLLog_dut_DPA:
	cat $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_DPA : hls_dut_DPA 


hls_dut_DPA : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_DPA)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v prep_vlog_dut_DPA BDW_DEP_CYNTH_CONFIG=DPA
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.DPA $(MAKE) CWBExec=1 hls_dut_DPA
endif

catVLGLog_dut_DPA : catHLLog_dut_DPA
	cat $(BDW_WORKLIB)/modules/dut/DPA/stratus_vlg.log

#
#	view rule
#
view_dut_DPA : hls_dut_DPA
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig DPA

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/DPA/dut_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_dut_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl dut DPA]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/DPA/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_dut_DPA) -o $(BDW_WORKLIB)/modules/dut/DPA/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/DPA/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/DPA -I./ $(CCFLAGS_dut_DPA) $(shell echo "puts [extractHoistLibDashIs project.tcl dut DPA]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/DPA/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/DPA/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config DPA of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_DPA)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPA/dut.o $(BDW_WORKLIB)/modules/dut/DPA/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/DPA"
##############################################################

dut_DPA_SRCDIR = $(BDW_WORKLIB)/modules/dut/DPA
dut_DPA_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_DPA
dut_DPA_LIBNAME = dut_DPA
dut_DPA_WORKLIB = $(BDW_WORKLIB)/modules/dut/DPA
dut_DPA_C_PARTS_A = $(dut_DPA_WORKLIB)/objs/libdut_DPA.a

prep_c_dut_DPA : $(dut_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPA_WORKLIB) prep_c

prep_vlog_dut_DPA : $(dut_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPA_WORKLIB) prep_vlog

prep_dut_DPA : $(dut_DPA_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_DPA_WORKLIB) prep

$(dut_DPA_WORKLIB)/Makefile : $(dut_DPA_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_DPA_WORKLIB) ]; then mkdir -p $(dut_DPA_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_DPA_SRCDIR) -o $(dut_DPA_WORKLIB)/Makefile -module dut -cynthconfig DPA  

$(dut_DPA_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_DPA_WORKLIB) ]; then mkdir -p $(dut_DPA_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_DPA_WORKLIB)/dut_DPA.d :
	@if [ ! -d $(dut_DPA_WORKLIB) ]; then mkdir -p $(dut_DPA_WORKLIB); fi
	@touch $(dut_DPA_WORKLIB)/dut_DPA.d



#
# HLS config PIPELINE
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_PIPELINE = 
LIB_INCLUDES_dut_PIPELINE = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIPELINE))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_PIPELINE = 
LIB_NAMES_FOR_VLOG_dut_PIPELINE = 
PREFIXED_LIB_NAMES_dut_PIPELINE = 
CCFLAGS_dut_PIPELINE = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/PIPELINE/c_parts -DPIPELINE=1 -DBDW_RTL_dut_PIPELINE=1 -DII=2 $(LIB_INCLUDES_dut_PIPELINE)
CCFLAGS_dut_PIPELINE += ${BDW_CCFLAGS_TAIL}

hls_dut_PIPELINE : hlsc_dut_PIPELINE

cynth_dut_PIPELINE : hlsc_dut_PIPELINE 

elab_dut_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr

optim_dut_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr

sched_dut_PIPELINE : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr

hlsc_dut_PIPELINE :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=PIPELINE BDW_MODULE=dut BDW_HLS_CONFIG=PIPELINE
else
	@bdw_exec -jobproject project.tcl -job hls.dut.PIPELINE $(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=PIPELINE BDW_MODULE=dut BDW_HLS_CONFIG=PIPELINE
endif

clean_cynth_dut_PIPELINE: clean_hls_dut_PIPELINE

clean_dut_PIPELINE: clean_hls_dut_PIPELINE

clean_hls_dut_PIPELINE:
	@rm -rf $(BDW_WORKLIB)/modules/dut/PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.PIPELINE
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.PIPELINE.s

kill_hls_dut_PIPELINE:
	@bdw_kill -job hls.dut.PIPELINE
	@bdw_kill -job hls.dut.PIPELINE.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),PIPELINE)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_PIPELINE :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig PIPELINE



$(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdl : $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/PIPELINE ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/PIPELINE; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=PIPELINE BDW_CYNTH_CONFIG=PIPELINE \
	bdw_exec -jobproject project.tcl -job hls.dut.PIPELINE.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_PIPELINE) \
		-d $(BDW_WORKLIB)/modules/dut/PIPELINE -o dut_rtl.cc \
		--hls_module=dut --hls_config=PIPELINE --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIPELINE))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_PIPELINE))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_PIPELINE))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 dut.cc
	
	
	
	
	
$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h : $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig PIPELINE -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h.updated

catHLLog_dut_PIPELINE:
	cat $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_PIPELINE : hls_dut_PIPELINE 


hls_dut_PIPELINE : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_PIPELINE)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v prep_vlog_dut_PIPELINE BDW_DEP_CYNTH_CONFIG=PIPELINE
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.PIPELINE $(MAKE) CWBExec=1 hls_dut_PIPELINE
endif

catVLGLog_dut_PIPELINE : catHLLog_dut_PIPELINE
	cat $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_vlg.log

#
#	view rule
#
view_dut_PIPELINE : hls_dut_PIPELINE
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig PIPELINE

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_dut_PIPELINE) $(shell echo "puts [extractHoistLibDashIs project.tcl dut PIPELINE]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_dut_PIPELINE) -o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIPELINE -I./ $(CCFLAGS_dut_PIPELINE) $(shell echo "puts [extractHoistLibDashIs project.tcl dut PIPELINE]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config PIPELINE of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_PIPELINE)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.o $(BDW_WORKLIB)/modules/dut/PIPELINE/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/PIPELINE"
##############################################################

dut_PIPELINE_SRCDIR = $(BDW_WORKLIB)/modules/dut/PIPELINE
dut_PIPELINE_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_PIPELINE
dut_PIPELINE_LIBNAME = dut_PIPELINE
dut_PIPELINE_WORKLIB = $(BDW_WORKLIB)/modules/dut/PIPELINE
dut_PIPELINE_C_PARTS_A = $(dut_PIPELINE_WORKLIB)/objs/libdut_PIPELINE.a

prep_c_dut_PIPELINE : $(dut_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIPELINE_WORKLIB) prep_c

prep_vlog_dut_PIPELINE : $(dut_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIPELINE_WORKLIB) prep_vlog

prep_dut_PIPELINE : $(dut_PIPELINE_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIPELINE_WORKLIB) prep

$(dut_PIPELINE_WORKLIB)/Makefile : $(dut_PIPELINE_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_PIPELINE_WORKLIB) ]; then mkdir -p $(dut_PIPELINE_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_PIPELINE_SRCDIR) -o $(dut_PIPELINE_WORKLIB)/Makefile -module dut -cynthconfig PIPELINE  

$(dut_PIPELINE_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_PIPELINE_WORKLIB) ]; then mkdir -p $(dut_PIPELINE_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_PIPELINE_WORKLIB)/dut_PIPELINE.d :
	@if [ ! -d $(dut_PIPELINE_WORKLIB) ]; then mkdir -p $(dut_PIPELINE_WORKLIB); fi
	@touch $(dut_PIPELINE_WORKLIB)/dut_PIPELINE.d



#
# HLS config UNROLL
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_UNROLL = 
LIB_INCLUDES_dut_UNROLL = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_UNROLL))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_UNROLL = 
LIB_NAMES_FOR_VLOG_dut_UNROLL = 
PREFIXED_LIB_NAMES_dut_UNROLL = 
CCFLAGS_dut_UNROLL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/UNROLL/c_parts -DUNROLL=1 -DBDW_RTL_dut_UNROLL=1 -DUNROLL $(LIB_INCLUDES_dut_UNROLL)
CCFLAGS_dut_UNROLL += ${BDW_CCFLAGS_TAIL}

hls_dut_UNROLL : hlsc_dut_UNROLL

cynth_dut_UNROLL : hlsc_dut_UNROLL 

elab_dut_UNROLL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/UNROLL/stratus_hls.bdr

optim_dut_UNROLL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/UNROLL/stratus_hls.bdr

sched_dut_UNROLL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/UNROLL/stratus_hls.bdr

hlsc_dut_UNROLL :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=UNROLL BDW_MODULE=dut BDW_HLS_CONFIG=UNROLL
else
	@bdw_exec -jobproject project.tcl -job hls.dut.UNROLL $(MAKE) $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=UNROLL BDW_MODULE=dut BDW_HLS_CONFIG=UNROLL
endif

clean_cynth_dut_UNROLL: clean_hls_dut_UNROLL

clean_dut_UNROLL: clean_hls_dut_UNROLL

clean_hls_dut_UNROLL:
	@rm -rf $(BDW_WORKLIB)/modules/dut/UNROLL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.UNROLL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.UNROLL.s

kill_hls_dut_UNROLL:
	@bdw_kill -job hls.dut.UNROLL
	@bdw_kill -job hls.dut.UNROLL.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),UNROLL)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/UNROLL/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_UNROLL :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig UNROLL



$(BDW_WORKLIB)/modules/dut/UNROLL/stratus_hls.bdl : $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.cc

$(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.v $(BDW_WORKLIB)/modules/dut/UNROLL/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/UNROLL ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/UNROLL; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=UNROLL BDW_CYNTH_CONFIG=UNROLL \
	bdw_exec -jobproject project.tcl -job hls.dut.UNROLL.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_UNROLL) \
		-d $(BDW_WORKLIB)/modules/dut/UNROLL -o dut_rtl.cc \
		--hls_module=dut --hls_config=UNROLL --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_UNROLL))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_UNROLL))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_UNROLL))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 dut.cc
	
	
	
	
	
$(BDW_WORKLIB)/modules/dut/UNROLL/dut_trace.h : $(BDW_WORKLIB)/modules/dut/UNROLL/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/UNROLL/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig UNROLL -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/UNROLL/dut_trace.h.updated

catHLLog_dut_UNROLL:
	cat $(BDW_WORKLIB)/modules/dut/UNROLL/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_UNROLL : hls_dut_UNROLL 


hls_dut_UNROLL : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_UNROLL)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.v prep_vlog_dut_UNROLL BDW_DEP_CYNTH_CONFIG=UNROLL
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.UNROLL $(MAKE) CWBExec=1 hls_dut_UNROLL
endif

catVLGLog_dut_UNROLL : catHLLog_dut_UNROLL
	cat $(BDW_WORKLIB)/modules/dut/UNROLL/stratus_vlg.log

#
#	view rule
#
view_dut_UNROLL : hls_dut_UNROLL
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig UNROLL

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/UNROLL/dut_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/UNROLL -I./ $(CCFLAGS_dut_UNROLL) $(shell echo "puts [extractHoistLibDashIs project.tcl dut UNROLL]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/UNROLL/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/UNROLL -I./ $(CCFLAGS_dut_UNROLL) -o $(BDW_WORKLIB)/modules/dut/UNROLL/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/UNROLL/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/UNROLL -I./ $(CCFLAGS_dut_UNROLL) $(shell echo "puts [extractHoistLibDashIs project.tcl dut UNROLL]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/UNROLL/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/UNROLL/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config UNROLL of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_UNROLL)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/UNROLL/dut.o $(BDW_WORKLIB)/modules/dut/UNROLL/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/UNROLL"
##############################################################

dut_UNROLL_SRCDIR = $(BDW_WORKLIB)/modules/dut/UNROLL
dut_UNROLL_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_UNROLL
dut_UNROLL_LIBNAME = dut_UNROLL
dut_UNROLL_WORKLIB = $(BDW_WORKLIB)/modules/dut/UNROLL
dut_UNROLL_C_PARTS_A = $(dut_UNROLL_WORKLIB)/objs/libdut_UNROLL.a

prep_c_dut_UNROLL : $(dut_UNROLL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_UNROLL_WORKLIB) prep_c

prep_vlog_dut_UNROLL : $(dut_UNROLL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_UNROLL_WORKLIB) prep_vlog

prep_dut_UNROLL : $(dut_UNROLL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_UNROLL_WORKLIB) prep

$(dut_UNROLL_WORKLIB)/Makefile : $(dut_UNROLL_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_UNROLL_WORKLIB) ]; then mkdir -p $(dut_UNROLL_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_UNROLL_SRCDIR) -o $(dut_UNROLL_WORKLIB)/Makefile -module dut -cynthconfig UNROLL  

$(dut_UNROLL_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_UNROLL_WORKLIB) ]; then mkdir -p $(dut_UNROLL_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_UNROLL_WORKLIB)/dut_UNROLL.d :
	@if [ ! -d $(dut_UNROLL_WORKLIB) ]; then mkdir -p $(dut_UNROLL_WORKLIB); fi
	@touch $(dut_UNROLL_WORKLIB)/dut_UNROLL.d



#
# HLS config PIP_URL
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_PIP_URL = 
LIB_INCLUDES_dut_PIP_URL = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIP_URL))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_PIP_URL = 
LIB_NAMES_FOR_VLOG_dut_PIP_URL = 
PREFIXED_LIB_NAMES_dut_PIP_URL = 
CCFLAGS_dut_PIP_URL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/PIP_URL/c_parts -DPIP_URL=1 -DBDW_RTL_dut_PIP_URL=1 -DII=2 -DUNROLL $(LIB_INCLUDES_dut_PIP_URL)
CCFLAGS_dut_PIP_URL += ${BDW_CCFLAGS_TAIL}

hls_dut_PIP_URL : hlsc_dut_PIP_URL

cynth_dut_PIP_URL : hlsc_dut_PIP_URL 

elab_dut_PIP_URL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIP_URL/stratus_hls.bdr

optim_dut_PIP_URL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIP_URL/stratus_hls.bdr

sched_dut_PIP_URL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/PIP_URL/stratus_hls.bdr

hlsc_dut_PIP_URL :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=PIP_URL BDW_MODULE=dut BDW_HLS_CONFIG=PIP_URL
else
	@bdw_exec -jobproject project.tcl -job hls.dut.PIP_URL $(MAKE) $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=PIP_URL BDW_MODULE=dut BDW_HLS_CONFIG=PIP_URL
endif

clean_cynth_dut_PIP_URL: clean_hls_dut_PIP_URL

clean_dut_PIP_URL: clean_hls_dut_PIP_URL

clean_hls_dut_PIP_URL:
	@rm -rf $(BDW_WORKLIB)/modules/dut/PIP_URL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.PIP_URL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.PIP_URL.s

kill_hls_dut_PIP_URL:
	@bdw_kill -job hls.dut.PIP_URL
	@bdw_kill -job hls.dut.PIP_URL.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),PIP_URL)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/PIP_URL/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_PIP_URL :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig PIP_URL



$(BDW_WORKLIB)/modules/dut/PIP_URL/stratus_hls.bdl : $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.cc

$(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.v $(BDW_WORKLIB)/modules/dut/PIP_URL/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/PIP_URL ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/PIP_URL; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=PIP_URL BDW_CYNTH_CONFIG=PIP_URL \
	bdw_exec -jobproject project.tcl -job hls.dut.PIP_URL.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_PIP_URL) \
		-d $(BDW_WORKLIB)/modules/dut/PIP_URL -o dut_rtl.cc \
		--hls_module=dut --hls_config=PIP_URL --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_PIP_URL))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_PIP_URL))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_PIP_URL))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 dut.cc
	
	
	
	
	
$(BDW_WORKLIB)/modules/dut/PIP_URL/dut_trace.h : $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/PIP_URL/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig PIP_URL -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_trace.h.updated

catHLLog_dut_PIP_URL:
	cat $(BDW_WORKLIB)/modules/dut/PIP_URL/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_PIP_URL : hls_dut_PIP_URL 


hls_dut_PIP_URL : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_PIP_URL)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.v prep_vlog_dut_PIP_URL BDW_DEP_CYNTH_CONFIG=PIP_URL
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.PIP_URL $(MAKE) CWBExec=1 hls_dut_PIP_URL
endif

catVLGLog_dut_PIP_URL : catHLLog_dut_PIP_URL
	cat $(BDW_WORKLIB)/modules/dut/PIP_URL/stratus_vlg.log

#
#	view rule
#
view_dut_PIP_URL : hls_dut_PIP_URL
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig PIP_URL

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIP_URL -I./ $(CCFLAGS_dut_PIP_URL) $(shell echo "puts [extractHoistLibDashIs project.tcl dut PIP_URL]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/PIP_URL/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIP_URL -I./ $(CCFLAGS_dut_PIP_URL) -o $(BDW_WORKLIB)/modules/dut/PIP_URL/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/PIP_URL/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/PIP_URL -I./ $(CCFLAGS_dut_PIP_URL) $(shell echo "puts [extractHoistLibDashIs project.tcl dut PIP_URL]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/PIP_URL/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config PIP_URL of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_PIP_URL)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIP_URL/dut.o $(BDW_WORKLIB)/modules/dut/PIP_URL/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/PIP_URL"
##############################################################

dut_PIP_URL_SRCDIR = $(BDW_WORKLIB)/modules/dut/PIP_URL
dut_PIP_URL_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_PIP_URL
dut_PIP_URL_LIBNAME = dut_PIP_URL
dut_PIP_URL_WORKLIB = $(BDW_WORKLIB)/modules/dut/PIP_URL
dut_PIP_URL_C_PARTS_A = $(dut_PIP_URL_WORKLIB)/objs/libdut_PIP_URL.a

prep_c_dut_PIP_URL : $(dut_PIP_URL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIP_URL_WORKLIB) prep_c

prep_vlog_dut_PIP_URL : $(dut_PIP_URL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIP_URL_WORKLIB) prep_vlog

prep_dut_PIP_URL : $(dut_PIP_URL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_PIP_URL_WORKLIB) prep

$(dut_PIP_URL_WORKLIB)/Makefile : $(dut_PIP_URL_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_PIP_URL_WORKLIB) ]; then mkdir -p $(dut_PIP_URL_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_PIP_URL_SRCDIR) -o $(dut_PIP_URL_WORKLIB)/Makefile -module dut -cynthconfig PIP_URL  

$(dut_PIP_URL_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_PIP_URL_WORKLIB) ]; then mkdir -p $(dut_PIP_URL_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_PIP_URL_WORKLIB)/dut_PIP_URL.d :
	@if [ ! -d $(dut_PIP_URL_WORKLIB) ]; then mkdir -p $(dut_PIP_URL_WORKLIB); fi
	@touch $(dut_PIP_URL_WORKLIB)/dut_PIP_URL.d



#
# HLS config USE_ALL
#

#
#	stratus_hls rule
#
LIB_DIRS_dut_USE_ALL = 
LIB_INCLUDES_dut_USE_ALL = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_dut_USE_ALL))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_dut_USE_ALL = 
LIB_NAMES_FOR_VLOG_dut_USE_ALL = 
PREFIXED_LIB_NAMES_dut_USE_ALL = 
CCFLAGS_dut_USE_ALL = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/dut/USE_ALL/c_parts -DUSE_ALL=1 -DBDW_RTL_dut_USE_ALL=1 -DII=2 -DUNROLL $(LIB_INCLUDES_dut_USE_ALL)
CCFLAGS_dut_USE_ALL += ${BDW_CCFLAGS_TAIL}

hls_dut_USE_ALL : hlsc_dut_USE_ALL

cynth_dut_USE_ALL : hlsc_dut_USE_ALL 

elab_dut_USE_ALL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/dut/USE_ALL/stratus_hls.bdr

optim_dut_USE_ALL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/dut/USE_ALL/stratus_hls.bdr

sched_dut_USE_ALL : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/dut/USE_ALL/stratus_hls.bdr

hlsc_dut_USE_ALL :
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=USE_ALL BDW_MODULE=dut BDW_HLS_CONFIG=USE_ALL
else
	@bdw_exec -jobproject project.tcl -job hls.dut.USE_ALL $(MAKE) $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.cc BDW_DEP_CYNTH_CONFIG=USE_ALL BDW_MODULE=dut BDW_HLS_CONFIG=USE_ALL
endif

clean_cynth_dut_USE_ALL: clean_hls_dut_USE_ALL

clean_dut_USE_ALL: clean_hls_dut_USE_ALL

clean_hls_dut_USE_ALL:
	@rm -rf $(BDW_WORKLIB)/modules/dut/USE_ALL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.USE_ALL
	@rm -rf $(BDW_WORKLIB)/jobs/hls.dut.USE_ALL.s

kill_hls_dut_USE_ALL:
	@bdw_kill -job hls.dut.USE_ALL
	@bdw_kill -job hls.dut.USE_ALL.s


ifeq ($(BDW_DEP_CYNTH_CONFIG),USE_ALL)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/dut/USE_ALL/dut.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_dut_USE_ALL :
	bdw_htmlgen -project project.tcl -module dut -cynthconfig USE_ALL



$(BDW_WORKLIB)/modules/dut/USE_ALL/stratus_hls.bdl : $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.cc

$(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.v $(BDW_WORKLIB)/modules/dut/USE_ALL/stratus_hls.bdr :  dut.cc  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/dut/USE_ALL ]; then mkdir -p $(BDW_WORKLIB)/modules/dut/USE_ALL; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=USE_ALL BDW_CYNTH_CONFIG=USE_ALL \
	bdw_exec -jobproject project.tcl -job hls.dut.USE_ALL.s \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_dut_USE_ALL) \
		-d $(BDW_WORKLIB)/modules/dut/USE_ALL -o dut_rtl.cc \
		--hls_module=dut --hls_config=USE_ALL --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_dut_USE_ALL))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_dut_USE_ALL))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_dut_USE_ALL))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		 dut.cc
	
	
	
	
	
$(BDW_WORKLIB)/modules/dut/USE_ALL/dut_trace.h : $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_trace.h.updated

$(BDW_WORKLIB)/modules/dut/USE_ALL/dut_trace.h.updated : $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.cc $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module dut -cynthconfig USE_ALL -vcd 
	@touch $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_trace.h.updated

catHLLog_dut_USE_ALL:
	cat $(BDW_WORKLIB)/modules/dut/USE_ALL/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_dut_USE_ALL : hls_dut_USE_ALL 


hls_dut_USE_ALL : $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_dut_USE_ALL)) 
ifeq ($(CWBExec),1)
	@$(MAKE) $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.v prep_vlog_dut_USE_ALL BDW_DEP_CYNTH_CONFIG=USE_ALL
else
	@bdw_exec -jobproject project.tcl -job hlsv.dut.USE_ALL $(MAKE) CWBExec=1 hls_dut_USE_ALL
endif

catVLGLog_dut_USE_ALL : catHLLog_dut_USE_ALL
	cat $(BDW_WORKLIB)/modules/dut/USE_ALL/stratus_vlg.log

#
#	view rule
#
view_dut_USE_ALL : hls_dut_USE_ALL
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig USE_ALL

#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.o : $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_trace.h 
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/dut_wrap.cc `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl dut`
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/USE_ALL -I./ $(CCFLAGS_dut_USE_ALL) $(shell echo "puts [extractHoistLibDashIs project.tcl dut USE_ALL]" | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/dut/USE_ALL/dut.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_wrap.h $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/USE_ALL -I./ $(CCFLAGS_dut_USE_ALL) -o $(BDW_WORKLIB)/modules/dut/USE_ALL/dut.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

$(BDW_WORKLIB)/modules/dut/USE_ALL/dut_hoist.o :  dut.cc $(BDW_WORKLIB)/wrappers/dut_wrap.cc $(BDW_WORKLIB)/wrappers/dut_cosim.h $(BDW_WORKLIB)/wrappers/dut_trace.h 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC)  -I$(BDW_WORKLIB)/modules/dut/USE_ALL -I./ $(CCFLAGS_dut_USE_ALL) $(shell echo "puts [extractHoistLibDashIs project.tcl dut USE_ALL]"  | $(STRATUS_HOME)/bin/bdw_shell) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_hoist.o  $(BDW_WORKLIB)/wrappers/dut_wrap.cc
    

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/dut/USE_ALL/dut.d :  dut.cc
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config USE_ALL of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_dut_USE_ALL)  dut.cc \
	| sed 's|dut\.o[ :]*|$(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/USE_ALL/dut.o $(BDW_WORKLIB)/modules/dut/USE_ALL/dut.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/dut/USE_ALL"
##############################################################

dut_USE_ALL_SRCDIR = $(BDW_WORKLIB)/modules/dut/USE_ALL
dut_USE_ALL_BEH_SRCDIR = $(BDW_WORKLIB)/libs/dut_USE_ALL
dut_USE_ALL_LIBNAME = dut_USE_ALL
dut_USE_ALL_WORKLIB = $(BDW_WORKLIB)/modules/dut/USE_ALL
dut_USE_ALL_C_PARTS_A = $(dut_USE_ALL_WORKLIB)/objs/libdut_USE_ALL.a

prep_c_dut_USE_ALL : $(dut_USE_ALL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_USE_ALL_WORKLIB) prep_c

prep_vlog_dut_USE_ALL : $(dut_USE_ALL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_USE_ALL_WORKLIB) prep_vlog

prep_dut_USE_ALL : $(dut_USE_ALL_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(dut_USE_ALL_WORKLIB) prep

$(dut_USE_ALL_WORKLIB)/Makefile : $(dut_USE_ALL_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(dut_USE_ALL_WORKLIB) ]; then mkdir -p $(dut_USE_ALL_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim builtin -lib $(dut_USE_ALL_SRCDIR) -o $(dut_USE_ALL_WORKLIB)/Makefile -module dut -cynthconfig USE_ALL  

$(dut_USE_ALL_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(dut_USE_ALL_WORKLIB) ]; then mkdir -p $(dut_USE_ALL_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(dut_USE_ALL_WORKLIB)/dut_USE_ALL.d :
	@if [ ! -d $(dut_USE_ALL_WORKLIB) ]; then mkdir -p $(dut_USE_ALL_WORKLIB); fi
	@touch $(dut_USE_ALL_WORKLIB)/dut_USE_ALL.d



#
# Rules for configured systemModules
#


#
# Per-hls_config rules
#

cynth_UNROLL:  cynth_dut_UNROLL
hlsc_UNROLL:  
	$(MAKE) -j1 hlsc_dut_UNROLL

cynthvlg_UNROLL: hls_UNROLL
hls_UNROLL:  
	$(MAKE) -j1 hls_dut_UNROLL

cynthvlg_UNROLL: elab_UNROLL
elab_UNROLL:  
	$(MAKE) -j1 elab_dut_UNROLL

cynthvlg_UNROLL: optim_UNROLL
optim_UNROLL:  
	$(MAKE) -j1 optim_dut_UNROLL

cynthvlg_UNROLL: sched_UNROLL
sched_UNROLL:  
	$(MAKE) -j1 sched_dut_UNROLL

view_UNROLL: hls_UNROLL
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig UNROLL


clean_UNROLL:
	@rm -f $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/UNROLL/stratus_hls.bdr


cynth_USE_ALL:  cynth_dut_USE_ALL
hlsc_USE_ALL:  
	$(MAKE) -j1 hlsc_dut_USE_ALL

cynthvlg_USE_ALL: hls_USE_ALL
hls_USE_ALL:  
	$(MAKE) -j1 hls_dut_USE_ALL

cynthvlg_USE_ALL: elab_USE_ALL
elab_USE_ALL:  
	$(MAKE) -j1 elab_dut_USE_ALL

cynthvlg_USE_ALL: optim_USE_ALL
optim_USE_ALL:  
	$(MAKE) -j1 optim_dut_USE_ALL

cynthvlg_USE_ALL: sched_USE_ALL
sched_USE_ALL:  
	$(MAKE) -j1 sched_dut_USE_ALL

view_USE_ALL: hls_USE_ALL
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig USE_ALL


clean_USE_ALL:
	@rm -f $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/USE_ALL/stratus_hls.bdr


cynth_DPA:  cynth_dut_DPA
hlsc_DPA:  
	$(MAKE) -j1 hlsc_dut_DPA

cynthvlg_DPA: hls_DPA
hls_DPA:  
	$(MAKE) -j1 hls_dut_DPA

cynthvlg_DPA: elab_DPA
elab_DPA:  
	$(MAKE) -j1 elab_dut_DPA

cynthvlg_DPA: optim_DPA
optim_DPA:  
	$(MAKE) -j1 optim_dut_DPA

cynthvlg_DPA: sched_DPA
sched_DPA:  
	$(MAKE) -j1 sched_dut_DPA

view_DPA: hls_DPA
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig DPA


clean_DPA:
	@rm -f $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/DPA/stratus_hls.bdr


cynth_PIPELINE:  cynth_dut_PIPELINE
hlsc_PIPELINE:  
	$(MAKE) -j1 hlsc_dut_PIPELINE

cynthvlg_PIPELINE: hls_PIPELINE
hls_PIPELINE:  
	$(MAKE) -j1 hls_dut_PIPELINE

cynthvlg_PIPELINE: elab_PIPELINE
elab_PIPELINE:  
	$(MAKE) -j1 elab_dut_PIPELINE

cynthvlg_PIPELINE: optim_PIPELINE
optim_PIPELINE:  
	$(MAKE) -j1 optim_dut_PIPELINE

cynthvlg_PIPELINE: sched_PIPELINE
sched_PIPELINE:  
	$(MAKE) -j1 sched_dut_PIPELINE

view_PIPELINE: hls_PIPELINE
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig PIPELINE


clean_PIPELINE:
	@rm -f $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIPELINE/stratus_hls.bdr


cynth_BASIC:  cynth_dut_BASIC
hlsc_BASIC:  
	$(MAKE) -j1 hlsc_dut_BASIC

cynthvlg_BASIC: hls_BASIC
hls_BASIC:  
	$(MAKE) -j1 hls_dut_BASIC

cynthvlg_BASIC: elab_BASIC
elab_BASIC:  
	$(MAKE) -j1 elab_dut_BASIC

cynthvlg_BASIC: optim_BASIC
optim_BASIC:  
	$(MAKE) -j1 optim_dut_BASIC

cynthvlg_BASIC: sched_BASIC
sched_BASIC:  
	$(MAKE) -j1 sched_dut_BASIC

view_BASIC: hls_BASIC
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig BASIC


clean_BASIC:
	@rm -f $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/BASIC/stratus_hls.bdr


cynth_PIP_URL:  cynth_dut_PIP_URL
hlsc_PIP_URL:  
	$(MAKE) -j1 hlsc_dut_PIP_URL

cynthvlg_PIP_URL: hls_PIP_URL
hls_PIP_URL:  
	$(MAKE) -j1 hls_dut_PIP_URL

cynthvlg_PIP_URL: elab_PIP_URL
elab_PIP_URL:  
	$(MAKE) -j1 elab_dut_PIP_URL

cynthvlg_PIP_URL: optim_PIP_URL
optim_PIP_URL:  
	$(MAKE) -j1 optim_dut_PIP_URL

cynthvlg_PIP_URL: sched_PIP_URL
sched_PIP_URL:  
	$(MAKE) -j1 sched_dut_PIP_URL

view_PIP_URL: hls_PIP_URL
	@bdw_view_verdi -project project.tcl -modules dut -cynthconfig PIP_URL


clean_PIP_URL:
	@rm -f $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.cc $(BDW_WORKLIB)/modules/dut/PIP_URL/stratus_hls.bdr



##############################################################################
#   start of rules for logic synthesis
##############################################################################

synth1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_LS_CONFIG_DIR) ]; then mkdir -p $(BDW_LS_CONFIG_DIR); fi
	@rm -rf $(BDW_LS_CONFIG_LOGS)
	@$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_synthinfo.tcl
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' STARTED"
ifeq ($(BDW_LS_LIC),)
	@echo "****** Error: synth1target FAILED because BDW_LS_LIC was not set"; exit 1
endif
endif
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job ls.$(BDW_LS_CONFIG).s $(BDW_LS_CMD)
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' FINISHED"
endif


#
#   Rules for logicSynth config L_BASIC
#

ifeq ($(CWBExec),1)
ls_L_BASIC: $(BDW_WORKLIB)/logicsynth/L_BASIC/dut_gates.v
else
.PHONY: ls_L_BASIC

ls_L_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.L_BASIC $(MAKE) CWBExec=1 ls_L_BASIC
endif

kill_ls_L_BASIC:
	@bdw_kill -job ls.L_BASIC
	@bdw_kill -job ls.L_BASIC.s

clean_ls_L_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_BASIC

$(BDW_WORKLIB)/logicsynth/L_BASIC/dut_gates.v: $(BDW_WORKLIB)/modules/dut/BASIC/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_BASIC BDW_MODULE=dut

view_ls_L_BASIC: hls_dut_BASIC 
	@bdw_view_verdi -project project.tcl -lsconfig L_BASIC

#
#   Rules for logicSynth config L_DPA
#

ifeq ($(CWBExec),1)
ls_L_DPA: $(BDW_WORKLIB)/logicsynth/L_DPA/dut_gates.v
else
.PHONY: ls_L_DPA

ls_L_DPA:
	@bdw_exec -jobproject project.tcl -job ls.L_DPA $(MAKE) CWBExec=1 ls_L_DPA
endif

kill_ls_L_DPA:
	@bdw_kill -job ls.L_DPA
	@bdw_kill -job ls.L_DPA.s

clean_ls_L_DPA:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_DPA

$(BDW_WORKLIB)/logicsynth/L_DPA/dut_gates.v: $(BDW_WORKLIB)/modules/dut/DPA/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_DPA 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_DPA BDW_MODULE=dut

view_ls_L_DPA: hls_dut_DPA 
	@bdw_view_verdi -project project.tcl -lsconfig L_DPA

#
#   Rules for logicSynth config L_PIPELINE
#

ifeq ($(CWBExec),1)
ls_L_PIPELINE: $(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut_gates.v
else
.PHONY: ls_L_PIPELINE

ls_L_PIPELINE:
	@bdw_exec -jobproject project.tcl -job ls.L_PIPELINE $(MAKE) CWBExec=1 ls_L_PIPELINE
endif

kill_ls_L_PIPELINE:
	@bdw_kill -job ls.L_PIPELINE
	@bdw_kill -job ls.L_PIPELINE.s

clean_ls_L_PIPELINE:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_PIPELINE

$(BDW_WORKLIB)/logicsynth/L_PIPELINE/dut_gates.v: $(BDW_WORKLIB)/modules/dut/PIPELINE/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_PIPELINE 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_PIPELINE BDW_MODULE=dut

view_ls_L_PIPELINE: hls_dut_PIPELINE 
	@bdw_view_verdi -project project.tcl -lsconfig L_PIPELINE

#
#   Rules for logicSynth config L_UNROLL
#

ifeq ($(CWBExec),1)
ls_L_UNROLL: $(BDW_WORKLIB)/logicsynth/L_UNROLL/dut_gates.v
else
.PHONY: ls_L_UNROLL

ls_L_UNROLL:
	@bdw_exec -jobproject project.tcl -job ls.L_UNROLL $(MAKE) CWBExec=1 ls_L_UNROLL
endif

kill_ls_L_UNROLL:
	@bdw_kill -job ls.L_UNROLL
	@bdw_kill -job ls.L_UNROLL.s

clean_ls_L_UNROLL:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_UNROLL

$(BDW_WORKLIB)/logicsynth/L_UNROLL/dut_gates.v: $(BDW_WORKLIB)/modules/dut/UNROLL/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_UNROLL 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_UNROLL BDW_MODULE=dut

view_ls_L_UNROLL: hls_dut_UNROLL 
	@bdw_view_verdi -project project.tcl -lsconfig L_UNROLL

#
#   Rules for logicSynth config L_PIP_URL
#

ifeq ($(CWBExec),1)
ls_L_PIP_URL: $(BDW_WORKLIB)/logicsynth/L_PIP_URL/dut_gates.v
else
.PHONY: ls_L_PIP_URL

ls_L_PIP_URL:
	@bdw_exec -jobproject project.tcl -job ls.L_PIP_URL $(MAKE) CWBExec=1 ls_L_PIP_URL
endif

kill_ls_L_PIP_URL:
	@bdw_kill -job ls.L_PIP_URL
	@bdw_kill -job ls.L_PIP_URL.s

clean_ls_L_PIP_URL:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_PIP_URL

$(BDW_WORKLIB)/logicsynth/L_PIP_URL/dut_gates.v: $(BDW_WORKLIB)/modules/dut/PIP_URL/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_PIP_URL 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_PIP_URL BDW_MODULE=dut

view_ls_L_PIP_URL: hls_dut_PIP_URL 
	@bdw_view_verdi -project project.tcl -lsconfig L_PIP_URL

#
#   Rules for logicSynth config L_USE_ALL
#

ifeq ($(CWBExec),1)
ls_L_USE_ALL: $(BDW_WORKLIB)/logicsynth/L_USE_ALL/dut_gates.v
else
.PHONY: ls_L_USE_ALL

ls_L_USE_ALL:
	@bdw_exec -jobproject project.tcl -job ls.L_USE_ALL $(MAKE) CWBExec=1 ls_L_USE_ALL
endif

kill_ls_L_USE_ALL:
	@bdw_kill -job ls.L_USE_ALL
	@bdw_kill -job ls.L_USE_ALL.s

clean_ls_L_USE_ALL:
	@rm -rf $(BDW_WORKLIB)/logicsynth/L_USE_ALL

$(BDW_WORKLIB)/logicsynth/L_USE_ALL/dut_gates.v: $(BDW_WORKLIB)/modules/dut/USE_ALL/dut_rtl.v 
ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_dut_USE_ALL 
	@$(MAKE) synth1target BDW_LS_CONFIG=L_USE_ALL BDW_MODULE=dut

view_ls_L_USE_ALL: hls_dut_USE_ALL 
	@bdw_view_verdi -project project.tcl -lsconfig L_USE_ALL

##############################################################################
#   start of rules for code analysis
##############################################################################

analysis1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
	@if [ ! -d $(BDW_ANALYSIS_CONFIG_DIR) ]; then mkdir -p $(BDW_ANALYSIS_CONFIG_DIR); fi
	@rm -rf $(BDW_ANALYSIS_CONFIG_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job analysis.$(BDW_ANALYSIS_CONFIG).s $(BDW_ANALYSIS_CMD) -project project.tcl -aconfig $(BDW_ANALYSIS_CONFIG) 2>&1 | tee $(BDW_ANALYSIS_CONFIG_DIR)/$(BDW_ANALYSIS_CONFIG).log

##############################################################################
#   start of rules for place and route
##############################################################################

pnr1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_PNR_CONFIG_DIR) ]; then mkdir -p $(BDW_PNR_CONFIG_DIR); fi
	@rm -rf $(BDW_PNR_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job pnr.$(BDW_PNR_CONFIG).s $(BDW_PNR_CMD) project.tcl $(BDW_PNR_CONFIG) 



#############################################################################
#  Rules for equivalence checking
#############################################################################
    

#############################################################################
#  Rules for Power estimation
#############################################################################
    


.INTERMEDIATE : $(BDW_LIBPREP) 

.PHONY : siminfo

siminfo :
	$(BDW_SIMCONFIG_MKDIR)
	@if [ ! -d $(BDW_WORKLIB)/INCA_libs ] ; then \
	    mkdir -p $(BDW_WORKLIB)/INCA_libs/bdw_worklib ; \
	fi	
	@echo "DEFINE bdw_worklib INCA_libs/bdw_worklib" > $(BDW_WORKLIB)/cds.lib
	@echo "DEFINE WORK bdw_worklib" > $(BDW_WORKLIB)/hdl.var
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl project.tcl $(BDW_SIM_CONFIG)


######################################################################
## Rules for building executables, shared libs, and running sims.
######################################################################

BDW_LIB_DASHI = \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_WHOLELIB_DIRS)))

BDW_SC_DEBUG_SRC = $(shell if [ -d $(SYSTEMC)/src ]; then echo "-d $(SYSTEMC)/src"; else echo ""; fi)
BDW_SIM_CONFIG_DIR	=	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
BDW_SIMCONFIG_MKDIR	=	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG) ]; then mkdir -p $(BDW_SIMDIR)/$(BDW_SIM_CONFIG); fi
BDW_SIM_ENV_SETUP	=	BDW_SIM_CONFIG_DIR=$(BDW_SIM_CONFIG_DIR)
BDW_END_OF_SIM_CMD	=	$(BDW_SIM_ENV_SETUP) make cmp_result
BDW_STRT_OF_SIM_CMD	=	@echo
ifneq ($(BDW_HUB_ARGV),)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG}.so
endif
BDW_VLOGSIM_ARGSINT += +hubSetOption+bdr=$(BDW_SIM_CONFIG_DIR)/sim.bdr
ifeq ($(RUN_DEBUGGER),1)
    BDW_VLOGSIM_ARGSINT  := $(strip $(BDW_VLOGSIM_ARGSINT)),gdbgui
	BDW_PREEXEC_DEBUG = gdb &
	BDW_INLINE_DEBUG = gdb --args
	export BDW_COWARE_RUN_DEBUG = 1
	BDW_COWARE_CMD = $(STRATUS_HOME)/bin/bdw_scsh --dofirst $(BDW_SIM_CONFIG_DIR)/coware.cmd
else
	BDW_COWARE_CMD = $(COWAREHOME)/common/bin/scsh $(BDW_SIM_CONFIG_DIR)/coware.cmd
endif
BDW_VLOGSIM_DEPS	=	$(COSIM_FILES) $(SIM_RTL_TARGETS) $(BDW_LIBPREP) $(BDW_ESC_LIB)

######################################################################
# Verilog RTL Code Coverage Simulation Setup
######################################################################

ifeq ($(BDW_MTI_POST_SIM_COMMANDS),)
BDW_MTI_POST_SIM_COMMANDS = 
endif

###############################################

.PHONY: run_sim

run_sim: 
	$(MAKE) $(EXECUTABLE)

scsim_$(BDW_SIM_CONFIG): $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	@echo "Executing simulation: $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV)"
	$(BDW_STRT_OF_SIM_CMD)
	@( $(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_INLINE_DEBUG) $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV) ; \
          simstatus=$$? ; export simstatus; \
          if [ $$simstatus -ne 0 ] ; then \
            if [ $$simstatus -gt 127 ] ; then \
                echo "ERROR: simulation exited with signal $$(($$simstatus - 128))" ; \
            else echo "WARNING: exit status = $$simstatus"; fi ; \
          fi ) 2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

#####################################################################
#####################################################################
update_hierarchy: prebuild_wrappers
	@$(STRATUS_HOME)/bin/bdw_makegen project.tcl -o Makefile.prj 


clean_sim_objs:
	@rm -rf $(SIM_OBJS) $(DEP_FILES) $(dir $(BDW_LIBREF))

build_sim_image: prebuild_wrappers prebuild_rtl
	@$(MAKE) -j 4 $(SIM_BUILD)

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
		-o $(BDW_TMPLNK_FILE) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
		mv $(BDW_TMPLNK_FILE) $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG)
else
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG): $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG) \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_CPARTS_A} \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
endif

##############################################################
## COSIM simulator rules
##############################################################

vcs: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

vcsi: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

incisive_covsetup:


xcelium incisive ncverilog: $(BDW_VLOGSIM_DEPS) incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+nowarn+LIBNOU $(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		$(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


export MTI_VCO_MODE = 64

mti: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	@echo removing log.passed in mti:
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work ]; then vlib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work; fi
	$(STRATUS_HOME)/bin/hub_vlog -work $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ];  then echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run -all" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ]; then  echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
endif
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_vsimvlog -c -lib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work top $(BDW_VLOG_TOP_MODS)\
		$(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) -do $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


BDW_NCSC_64BIT = -64bit

ifneq ($(BDW_HUB_ARGV),)
BDW_NCSIM_ARGV = +systemc_args+"$(BDW_HUB_ARGV)"
else
BDW_NCSIM_ARGV =
endif

ifeq ($(RUN_DEBUGGER), 1)
BDW_NCSIM_DEBUG = -layout cdebug
BDW_NCVLG_DEBUG = -layout cdebug -linedebug
else
BDW_NCSIM_DEBUG =
BDW_NCVLG_DEBUG =
endif

ncsc: incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
ifneq ($(RUN_DEBUGGER),1)
	@echo "run" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
	@echo "exit" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
endif
ifneq ($(VLOG_COSIM_TOP), )
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) $(BDW_NCVLG_DEBUG) \
	$(BDW_NCSC_GCCVER) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	+loadpli1=$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME)/ncvlog_ssl:ssl_bootstrap \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_VLOGSIM_ARGS) \
	$(BDW_VLOGSIM_ARGSINT) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_NCSC_INPUT_FILE) \
	-top sc_main $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

else
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) \
	$(BDW_NCSC_GCCVER) \
	$(BDW_VLOGSIM_ARGS) $(BDW_NCSIM_DEBUG) \
	-CFLAGS "-Wl,-rpath,$(STRATUS_HOME)/tools.lnx86/stratus/lib/64bit" \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	$(BDW_NCSC_INPUT_FILE) \
	-top sc_main $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

endif
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log



##############################################################
## Rule to build the COSIM shared library
##############################################################
ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so: $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
		-o $(BDW_TMPLNK_FILE)  \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}
		mv $(BDW_TMPLNK_FILE) $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so

else
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so: $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/sim_$(BDW_SIM_CONFIG).so  \
		$(SIM_OBJS) \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_CPARTS_A) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}

endif


##############################################################
## Rule to build verilator trace and coverage support  module
##############################################################

$(BDW_WORKLIB)/objs/esc_catrace.o: $(STRATUS_HOME)/share/stratus/source/esc_catrace.cc
	$(BDW_CC)  -o $@ $(BDW_CCFLAGS) $(BDW_VERILATOR_CCFLAGS)  $<



##############################################################
## Start the stratus_ide GUI
##############################################################
workbench ide:
	$(STRATUS_HOME)/bin/stratus_ide project.tcl

##############################################################
## Generate a Visual C++ project file
##############################################################
vcproj: $(BDW_ALL_WRAPPERS)
	$(STRATUS_HOME)/bin/bdw_vcprojgen project.tcl

##############################################################
## Rule to build the synthesis report
##############################################################

html_warn:
	@echo "##############################################" ; \
	echo " The HTML reports have been deprecated. " ; \
	echo " Reporting information is available in stratus_ide." ; \
	echo "" ; \
	echo -n " Do you want to generate deprecated HTML reports (y or n) [n] ? " ; \
	read resp ; \
	case $$resp in \
	y*) $(MAKE) html ;; \
	*) echo ""; echo "HTML Reports not generated." ;  \
	esac
 
html:   html_dut_BASIC html_dut_DPA html_dut_PIPELINE html_dut_UNROLL html_dut_PIP_URL html_dut_USE_ALL html_summary

html_summary: project.tcl
	$(STRATUS_HOME)/bin/bdw_htmlgen -project project.tcl -summary




##############################################################
## Rules to build generated library contents
##############################################################

